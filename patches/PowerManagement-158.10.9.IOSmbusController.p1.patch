--- /dev/null	2012-09-22 08:48:37.128390912 +0200
+++ PowerManagement-158.10.9.pd1/AppleSmartBatteryManager/IOSMBusController.h	2012-09-22 10:56:24.000000000 +0200
@@ -0,0 +1,154 @@
+/* IOSMBusController.h
+ */
+ 
+#ifndef __IOSMBusController__
+#define __IOSMBusController__
+
+#include <IOKit/IOService.h>
+#include <IOKit/acpi/IOACPIPlatformDevice.h>
+
+#if 0
+#define DEBUG_LOG(args...)  IOLog(args)
+#else
+#define DEBUG_LOG(args...)
+#endif
+
+
+/*****************************/
+//from IOKitLib.h
+
+typedef void
+(*IOServiceMatchingCallback)(
+	void *			refcon,
+	io_iterator_t		iterator );
+#define kIOSMBusMaxDataCount 4 //? or 4
+
+//#define kIOMessageSMBusAlarm
+
+
+/*******************************/
+
+// Status Register (SMB_STS) Codes
+// See section 12.9.1.1 of ACPI 4.0a specification
+
+#define kIOSMBusStatusOK                            0x00
+#define kIOSMBusStatusUnknownFailure                0x07
+#define kIOSMBusStatusDeviceAddressNotAcknowledged  0x10
+#define kIOSMBusStatusDeviceError                   0x11
+#define kIOSMBusStatusDeviceCommandAccessDenied     0x12
+#define kIOSMBusStatusUnknownHostError              0x13
+#define kIOSMBusStatusDeviceAccessDenied            0x17
+#define kIOSMBusStatusTimeout                       0x18
+#define kIOSMBusStatusHostUnsupportedProtocol       0x19
+#define kIOSMBusStatusBusy                          0x1A
+#define kIOSMBusStatusPECError                      0x1F
+
+// Protocol Register (SMB_PRTCL) Types
+// See section 12.9.1.2 of ACPI 4.0a specification
+
+#define kIOSMBusProtocolControllerNotInUse              0x00
+#define kIOSMBusProtocolReserved                        0x01
+#define kIOSMBusProtocolWriteQuickCommand               0x02
+#define kIOSMBusProtocolReadQuickCommand                0x03
+#define kIOSMBusProtocolSendByte                        0x04
+#define kIOSMBusProtocolReceiveByte                     0x05
+#define kIOSMBusProtocolWriteByte                       0x06
+#define kIOSMBusProtocolReadByte                        0x07
+#define kIOSMBusProtocolWriteWord                       0x08
+#define kIOSMBusProtocolReadWord                        0x09
+#define kIOSMBusProtocolWriteBlock                      0x0A
+#define kIOSMBusProtocolReadBlock                       0x0B
+#define kIOSMBusProtocolProcessCall                     0x0C
+#define kIOSMBusProtocolBlockWriteBlockReadProcessCall  0x0D
+
+// Same as above but with (P)acket (E)rror (C)hecking enabled
+
+#define kIOSMBusProtocolPECControllerNotInUse               0x80
+#define kIOSMBusProtocolPECReserved                         0x81
+#define kIOSMBusProtocolPECWriteQuickCommand                0x82
+#define kIOSMBusProtocolPECReadQuickCommand                 0x83
+#define kIOSMBusProtocolPECSendByte                         0x84
+#define kIOSMBusProtocolPECReceiveByte                      0x85
+#define kIOSMBusProtocolPECWriteByte                        0x86
+#define kIOSMBusProtocolPECReadByte                         0x87
+#define kIOSMBusProtocolPECWriteWord                        0x88
+#define kIOSMBusProtocolPECReadWord                         0x89
+#define kIOSMBusProtocolPECWriteBlock                       0x8A
+#define kIOSMBusProtocolPECReadBlock                        0x8B
+#define kIOSMBusProtocolPECProcessCall                      0x8C
+#define kIOSMBusProtocolPECBlockWriteBlockReadProcessCall   0x8D
+
+typedef uint8_t IOSMBusStatus;
+
+// Maximum size of SMBus Data Register Array (SMB_DATA)
+// See section 12.9.1.5 of ACPI 4.0a specification
+
+#define kSMBusMaximumDataSize   32
+
+// Holds data related to a SMBus transaction
+
+typedef struct 
+{
+    uint8_t         status;
+    uint8_t         protocol;
+    uint8_t         address;
+    uint8_t         command;
+    uint8_t         sendDataCount;
+    uint8_t         sendData[kSMBusMaximumDataSize];
+    uint8_t         receiveDataCount;
+    uint8_t         receiveData[kSMBusMaximumDataSize];
+} IOSMBusTransaction;
+
+// See section 12.9.1.7 of ACPI 4.0a specification
+
+#define kSMBusAlarmDataSize 2
+
+typedef struct
+{
+    uint8_t     fromAddress;
+    uint8_t     data[kSMBusAlarmDataSize];
+} IOSMBusAlarmMessage;
+
+typedef IOServiceMatchingCallback IOSMBusTransactionCompletion;
+
+class IOSMBusController : public IOService {    
+    
+    OSDeclareDefaultStructors(IOSMBusController)
+    
+public:
+ 
+    virtual bool init(OSDictionary *dictionary = 0);
+    virtual void free(void);
+    
+/*! @function start
+    @abstract During an IOService object's instantiation, starts the IOService object that has been selected to run on the provider.
+    @discussion The <code>start</code> method of an IOService instance is called by its provider when it has been selected (due to its probe score and match category) as the winning client. The client is already attached to the provider when <code>start</code> is called.<br>Implementations of <code>start</code> must call <code>start</code> on their superclass at an appropriate point. If an implementation of <code>start</code> has already called <code>super::start</code> but subsequently determines that it will fail, it must call <code>super::stop</code> to balance the prior call to <code>super::start</code> and prevent reference leaks.
+    @result <code>true</code> if the start was successful; <code>false</code> otherwise (which will cause the instance to be detached and usually freed). */
+    
+    virtual bool start( IOService * provider );
+    
+/*! @function stop
+    @abstract During an IOService termination, the stop method is called in its clients before they are detached & it is destroyed.
+    @discussion The termination process for an IOService (the provider) will call stop in each of its clients, after they have closed the provider if they had it open, or immediately on termination. */
+
+    virtual void stop( IOService * provider );
+
+
+    IOReturn performTransaction(IOSMBusTransaction * transaction,
+                                IOSMBusTransactionCompletion completion = 0,
+                                OSObject * target = 0,
+                                void * reference = 0);
+protected:
+
+private:
+
+    IOACPIPlatformDevice            *fProvider;
+
+    IOSMBusTransaction              fTransaction;
+    IOSMBusTransactionCompletion    fCompletion;
+    OSObject                        *fTarget;
+    void                            *fReference;
+    
+};
+
+#endif /* ! __IOSMBusController__ */
