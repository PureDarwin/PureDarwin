diff -ru CF-476.19/BuildCFLite CF-476.19-patched/BuildCFLite
--- CF-476.19/BuildCFLite	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/BuildCFLite	2012-10-09 15:56:57.000000000 +0200
@@ -18,11 +18,11 @@
 
 
 
-PUBLIC_HEADERS="CFArray.h CFBag.h CFBase.h CFBinaryHeap.h CFBitVector.h CFBundle.h CFByteOrder.h CFCalendar.h CFCharacterSet.h CFData.h CFDate.h CFDateFormatter.h CFDictionary.h CFError.h CFLocale.h CFMachPort.h CFMessagePort.h CFNumber.h CFNumberFormatter.h CFPlugIn.h CFPlugInCOM.h CFPreferences.h CFPropertyList.h CFRunLoop.h CFSet.h CFSocket.h CFStream.h CFString.h CFStringEncodingExt.h CFTimeZone.h CFTree.h CFURL.h CFURLAccess.h CFUUID.h CFUserNotification.h CFXMLNode.h CFXMLParser.h CoreFoundation.h"
+PUBLIC_HEADERS="CFArray.h CFBag.h CFBase.h CFBinaryHeap.h CFBitVector.h CFBundle.h CFByteOrder.h CFCalendar.h CFCharacterSet.h CFData.h CFDate.h CFDateFormatter.h CFDictionary.h CFError.h CFLocale.h CFMachPort.h CFMessagePort.h CFNumber.h CFNumberFormatter.h CFPlugIn.h CFPlugInCOM.h CFPreferences.h CFPropertyList.h CFRunLoop.h CFSet.h CFSocket.h CFStream.h CFString.h CFStringEncodingExt.h CFTimeZone.h CFTree.h CFURL.h CFURLAccess.h CFUUID.h CFUserNotification.h CFXMLNode.h CFXMLParser.h CoreFoundation.h CFNotificationCenter.h CFFileDescriptor.h"
 PRIVATE_HEADERS="CFBundlePriv.h CFCharacterSetPriv.h CFError_Private.h CFLogUtilities.h CFPriv.h CFRuntime.h CFStorage.h CFStreamAbstract.h CFStreamPriv.h CFStreamInternal.h CFStringDefaultEncoding.h CFStringEncodingConverter.h CFStringEncodingConverterExt.h CFUniChar.h CFUnicodeDecomposition.h CFUnicodePrecomposition.h ForFoundationOnly.h"
 
 OBJBASE=../CF-Objects
-ARCHFLAGS="-arch ppc -arch ppc64 -arch i386 -arch x86_64"
+ARCHFLAGS="-arch i386"
 CFLAGS="-c -pipe -std=gnu99 -g -Wmost -Wno-trigraphs -mmacosx-version-min=10.5 -fconstant-cfstrings -fexceptions -DCF_BUILDING_CF=1 -DDEPLOYMENT_TARGET_MACOSX=1 -DMAC_OS_X_VERSION_MAX_ALLOWED=MAC_OS_X_VERSION_10_5 -DU_SHOW_DRAFT_API=1 -I$OBJBASE -DVERSION=476.10"
 LFLAGS="-dynamiclib -mmacosx-version-min=10.5 -twolevel_namespace -init ___CFInitialize -compatibility_version 150 -current_version 476 -sectcreate __UNICODE __csbitmaps CFCharacterSetBitmaps.bitmap -sectcreate __UNICODE __properties CFUniCharPropertyDatabase.data -sectcreate __UNICODE __data $UNICODE_DATA_FILE -segprot __UNICODE r r"
 
@@ -47,8 +47,8 @@
 		fi
 	done
 	echo "Linking $STYLE ..."
-	echo /usr/bin/gcc $STYLE_LFLAGS -install_name /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation_$STYLE $ARCHFLAGS $LFLAGS $OBJBASE/$STYLE/*.o -licucore.A -lobjc -o $OBJBASE/CoreFoundation_$STYLE
-	/usr/bin/gcc $STYLE_LFLAGS -install_name /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation_$STYLE $ARCHFLAGS $LFLAGS $OBJBASE/$STYLE/*.o -licucore.A -lobjc -o $OBJBASE/CoreFoundation_$STYLE
+	echo /usr/bin/gcc $STYLE_LFLAGS -install_name /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation_$STYLE $ARCHFLAGS $LFLAGS $OBJBASE/$STYLE/*.o -F/System/Library/Frameworks -framework Foundation -licucore.A -lobjc -o $OBJBASE/CoreFoundation_$STYLE
+	/usr/bin/gcc $STYLE_LFLAGS -install_name /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation_$STYLE $ARCHFLAGS $LFLAGS $OBJBASE/$STYLE/*.o -F/System/Library/Frameworks -framework Foundation -licucore.A -lobjc -o $OBJBASE/CoreFoundation_$STYLE
 	if [ $? -ne 0 ]; then
 		echo "*** Linking $STYLE failed ***"
 		exit 1
diff -ru CF-476.19/CFApplicationPreferences.c CF-476.19-patched/CFApplicationPreferences.c
--- CF-476.19/CFApplicationPreferences.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFApplicationPreferences.c	2012-10-09 15:56:57.000000000 +0200
@@ -670,3 +670,18 @@
     updateDictRep(self);
     __CFSpinUnlock(&__CFApplicationPreferencesLock);
 }
+
+/*
+ * just a stub for puredarwin, for compatibility
+ * must really search in source from where is it called and patch here
+ * this is not the place to do thisBoolean 
+ */
+ 
+Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
+{
+	//try this as it must return something
+	return false;
+
+}
+
+
diff -ru CF-476.19/CFArray.c CF-476.19-patched/CFArray.c
--- CF-476.19/CFArray.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFArray.c	2012-10-09 15:56:57.000000000 +0200
@@ -1179,3 +1179,10 @@
 	CFArrayAppendValue(array, CFArrayGetValueAtIndex(otherArray, idx));
     }
 }
+
+
+
+/* PureFoundation - start _sjc_ */
+bool _CFArrayIsMutable(CFArrayRef array) { return (__CFArrayGetType(array) == __kCFArrayImmutable) ? false : true; }
+/* PureFoundation -  end  */
+
diff -ru CF-476.19/CFArray.h CF-476.19-patched/CFArray.h
--- CF-476.19/CFArray.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFArray.h	2012-10-09 15:56:57.000000000 +0200
@@ -687,6 +687,11 @@
 CF_EXPORT
 void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);
 
+/* PureFoundation - start _sjc_ */
+CF_EXPORT 
+bool _CFArrayIsMutable(CFArrayRef array);
+/* PureFoundation -  end  */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFARRAY__ */
diff -ru CF-476.19/CFBinaryPList.c CF-476.19-patched/CFBinaryPList.c
--- CF-476.19/CFBinaryPList.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFBinaryPList.c	2012-10-09 15:56:56.000000000 +0200
@@ -36,6 +36,9 @@
 #include <CoreFoundation/CFPropertyList.h>
 #include <CoreFoundation/CFByteOrder.h>
 #include <CoreFoundation/CFRuntime.h>
+// sjc -- 22/2/09
+#include <CoreFoundation/CFStream.h>
+// END
 #include <stdio.h>
 #include <limits.h>
 #include <string.h>
@@ -167,7 +170,14 @@
         CFDataAppendBytes((CFMutableDataRef)buf->stream, bytes, length);
         buf->written += length;
     } else {
+				/* sjc -- 22/2/09  SystemConfiguration relies on being able to serialize a plist
+				 *	to a write stream. There seems no reason why this isn't supported. The old code
+				 *	read:
         CFAssert(false, __kCFLogAssertion, "Streams are not supported on this platform");
+				 */
+				CFIndex lengthWritten = CFWriteStreamWrite((CFWriteStreamRef)buf->stream, bytes, length);
+				buf->written += lengthWritten;
+				// END
     }
 }
 
Seulement dans CF-476.19-patched/: CFBridgingPF.h
diff -ru CF-476.19/CFBundle.c CF-476.19-patched/CFBundle.c
--- CF-476.19/CFBundle.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFBundle.c	2012-10-09 21:25:32.836857334 +0200
@@ -128,6 +128,10 @@
 CONST_STRING_DECL(_kCFBundleResolvedPathKey, "NSBundleResolvedPath")
 CONST_STRING_DECL(_kCFBundlePrincipalClassKey, "NSPrincipalClass")
 
+// PureFoundation -- _sjc_ -- 9/2/09
+CONST_STRING_DECL(_kCFBundleResourceSpecificationKey, "CFBundleResourceSpecification")
+// PureFoundation -- END
+
 static CFTypeID __kCFBundleTypeID = _kCFRuntimeNotATypeID;
 
 struct __CFBundle {
@@ -401,6 +405,7 @@
     return outURL;
 }
 
+
 CFURLRef _CFBundleCopyBundleURLForExecutableURL(CFURLRef url) {
     CFURLRef resolvedURL, outurl = NULL;
     CFStringRef str;
@@ -414,6 +419,44 @@
     return outurl;
 }
 
+
+
+static uint8_t _CFBundleEffectiveLayoutVersion(CFBundleRef bundle) {
+    uint8_t localVersion = bundle->_version;
+    // exclude type 0 bundles with no binary (or CFM binary) and no Info.plist, since they give too many false positives
+    if (0 == localVersion) {
+        CFDictionaryRef infoDict = CFBundleGetInfoDictionary(bundle);
+        if (!infoDict || 0 == CFDictionaryGetCount(infoDict)) {
+#if defined(BINARY_SUPPORT_DYLD)
+            CFURLRef executableURL = CFBundleCopyExecutableURL(bundle);
+            if (executableURL) {
+                if (bundle->_binaryType == __CFBundleUnknownBinary) bundle->_binaryType = _CFBundleGrokBinaryType(executableURL);
+                if (bundle->_binaryType == __CFBundleCFMBinary || bundle->_binaryType == __CFBundleUnreadableBinary) {
+                    localVersion = 4;
+                } else {
+                    bundle->_resourceData._executableLacksResourceFork = true;
+                }
+                CFRelease(executableURL);
+            } else {
+                localVersion = 4;
+            }
+#elif defined(BINARY_SUPPORT_CFM)
+            localVersion = 4;
+#else 
+            CFURLRef executableURL = CFBundleCopyExecutableURL(bundle);
+            if (executableURL) {
+                CFRelease(executableURL);
+            } else {
+                localVersion = 4;
+            }
+#endif /* BINARY_SUPPORT_CFM && BINARY_SUPPORT_DYLD */
+        }
+    }
+    return localVersion;
+}
+
+
+
 CFBundleRef _CFBundleCreateIfLooksLikeBundle(CFAllocatorRef allocator, CFURLRef url) {
     CFBundleRef bundle = CFBundleCreate(allocator, url);
     
@@ -453,6 +496,17 @@
     return bundle;
 }
 
+/* Backport from CF-550*/
+CFBundleRef _CFBundleCreateIfMightBeBundle(CFAllocatorRef allocator, CFURLRef url) {
+	return _CFBundleCreateIfLooksLikeBundle(allocator, url);
+}
+
+/* Backport from CF-550*/
+CFBundleRef _CFBundleCreateWithExecutableURLIfMightBeBundle(CFAllocatorRef allocator, CFURLRef url) {
+	return _CFBundleCreateWithExecutableURLIfLooksLikeBundle(allocator, url);
+}
+
+
 CFBundleRef _CFBundleGetMainBundleIfLooksLikeBundle(void) {
     CFBundleRef mainBundle = CFBundleGetMainBundle();
     if (mainBundle && (3 == mainBundle->_version || 4 == mainBundle->_version)) mainBundle = NULL;
diff -ru CF-476.19/CFBundle.h CF-476.19-patched/CFBundle.h
--- CF-476.19/CFBundle.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFBundle.h	2012-10-09 21:33:33.108847794 +0200
@@ -350,6 +350,15 @@
 CF_EXPORT
 void CFBundleCloseBundleResourceMap(CFBundleRef bundle, CFBundleRefNum refNum);
 
+
+/* For Code Signing */
+/* backport from CF-550 */
+CF_EXPORT
+CFBundleRef _CFBundleCreateIfMightBeBundle(CFAllocatorRef allocator, CFURLRef url);
+/* backport from CF-550 */
+CF_EXPORT
+CFBundleRef _CFBundleCreateWithExecutableURLIfMightBeBundle(CFAllocatorRef allocator, CFURLRef url);
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFBUNDLE__ */
diff -ru CF-476.19/CFBundlePriv.h CF-476.19-patched/CFBundlePriv.h
--- CF-476.19/CFBundlePriv.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFBundlePriv.h	2012-10-09 21:27:11.144855383 +0200
@@ -109,6 +109,9 @@
 const CFStringRef _kCFBundleOldTypeOSTypesKey;
 
 
+
+
+
 /* Functions for examining directories that may "look like" bundles */
 
 CF_EXPORT
@@ -135,6 +138,8 @@
 CF_EXPORT
 CFBundleRef _CFBundleGetExistingBundleWithBundleURL(CFURLRef bundleURL);
 
+
+
 /* Functions for examining the structure of a bundle */
 
 CF_EXPORT
@@ -144,6 +149,8 @@
 CFURLRef _CFBundleCopyInfoPlistURL(CFBundleRef bundle);
 
 
+
+
 /* Functions for working without a bundle instance */
 
 CF_EXPORT
diff -ru CF-476.19/CFBundle_Resources.c CF-476.19-patched/CFBundle_Resources.c
--- CF-476.19/CFBundle_Resources.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFBundle_Resources.c	2012-10-09 21:27:35.260854902 +0200
@@ -2173,3 +2173,4 @@
     }
     return result;
 }
+
diff -ru CF-476.19/CFCharacterSet.c CF-476.19-patched/CFCharacterSet.c
--- CF-476.19/CFCharacterSet.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFCharacterSet.c	2012-10-09 15:56:57.000000000 +0200
@@ -2725,3 +2725,8 @@
         }
     }
 }
+
+/* PureFoundation - start _sjc_ */
+bool _CFCharacterSetIsMutable(CFCharacterSetRef cset) { return __CFCSetIsMutable(cset); }
+/* PureFoundation -  end  */
+
diff -ru CF-476.19/CFCharacterSet.h CF-476.19-patched/CFCharacterSet.h
--- CF-476.19/CFCharacterSet.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFCharacterSet.h	2012-10-09 15:56:57.000000000 +0200
@@ -409,6 +409,10 @@
 CF_EXPORT
 void CFCharacterSetInvert(CFMutableCharacterSetRef theSet);
 
+/* PureFoundation - start _sjc_ */
+CF_EXPORT bool _CFCharacterSetIsMutable(CFCharacterSetRef cset);
+/* PureFoundation -  end  */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFCHARACTERSET__ */
diff -ru CF-476.19/CFData.c CF-476.19-patched/CFData.c
--- CF-476.19/CFData.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFData.c	2012-10-09 15:56:57.000000000 +0200
@@ -411,6 +411,10 @@
     __CFDataSetLength(data, newCount);
 }
 
+/* PureFoundation - start _sjc_ */
+bool __PFDataIsMutable( CFDataRef data ) { return ( (__CFMutableVariety(data) == kCFMutable) || (__CFMutableVariety(data) == kCFFixedMutable) ); }
+/* PureFoundation -  end  */
+
 #undef __CFDataValidateRange
 #undef __CFGenericValidateMutabilityFlags
 
diff -ru CF-476.19/CFData.h CF-476.19-patched/CFData.h
--- CF-476.19/CFData.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFData.h	2012-10-09 15:56:57.000000000 +0200
@@ -80,6 +80,11 @@
 CF_EXPORT
 void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);
 
+/* PureFoundation - start _sjc_ */
+CF_EXPORT
+bool __PFDataIsMutable(CFDataRef data);
+/* PureFoundation -  end  */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFDATA__ */
diff -ru CF-476.19/CFDictionary.c CF-476.19-patched/CFDictionary.c
--- CF-476.19/CFDictionary.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFDictionary.c	2012-10-09 15:56:57.000000000 +0200
@@ -1462,6 +1462,10 @@
     }
 }
 
+/* PureFoundation - start _sjc_ */
+bool _CFDictionaryIsMutable(CFDictionaryRef dict) { return (__CFHashGetType(dict) == __kCFHashMutable); }
+/* PureFoundation -  end  */
+
 #undef CF_OBJC_KVO_WILLCHANGE
 #undef CF_OBJC_KVO_DIDCHANGE
 
diff -ru CF-476.19/CFDictionary.h CF-476.19-patched/CFDictionary.h
--- CF-476.19/CFDictionary.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFDictionary.h	2012-10-09 15:56:57.000000000 +0200
@@ -683,6 +683,10 @@
 CF_EXPORT
 void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);
 
+/* PureFoundation - start _sjc_ */
+CF_EXPORT bool _CFDictionaryIsMutable(CFDictionaryRef dict);
+/* PureFoundation -  end  */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFDICTIONARY__ */
Seulement dans CF-476.19-patched/: CFFileDescriptor.c
Seulement dans CF-476.19-patched/: CFFileDescriptor.h
diff -ru CF-476.19/CFInternal.h CF-476.19-patched/CFInternal.h
--- CF-476.19/CFInternal.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFInternal.h	2012-10-09 15:56:57.000000000 +0200
@@ -74,6 +74,10 @@
 
 #include "ForFoundationOnly.h"
 
+/* PureFoundation - start */
+Class _PFNSURLClass;
+/* PureFoundation -  end  */
+
 CF_EXPORT const char *_CFProcessName(void);
 CF_EXPORT CFStringRef _CFProcessNameString(void);
 
@@ -441,7 +445,12 @@
 CF_EXPORT CFIndex _CFStartOfPathExtension(UniChar *unichars, CFIndex length);
 CF_EXPORT CFIndex _CFLengthAfterDeletingPathExtension(UniChar *unichars, CFIndex length);
 
-#define CF_IS_OBJC(typeID, obj)	(false)
+/* PureFoundation - start opencflite*/
+
+//#define CF_IS_OBJC(typeID, obj)	(false)
+#define CF_IS_OBJC(typeID, obj) (((CFRuntimeBase *)(obj))->_cfisa != NULL && ((CFRuntimeBase *)(obj))->_cfisa != __CFISAForTypeID(typeID))
+
+/* PureFoundation - end */
 
 #define CF_OBJC_VOIDCALL0(obj, sel)
 #define CF_OBJC_VOIDCALL1(obj, sel, a1)
@@ -467,7 +476,16 @@
 #define CF_OBJC_FUNCDISPATCH5(typeID, rettype, obj, sel, a1, a2, a3, a4, a5)
 #endif //__WIN32__
 
-#define __CFISAForTypeID(x) (0)
+/* PureFoundation - start _sjc_ 
+ *	_sjc_ : To re-enable the CF-Foundation bridge, 
+ *  this has be re-instated as a full function. It
+ *	can be found implemented in CFRuntime.c ~line 200
+ */
+
+//#define __CFISAForTypeID(x) (0)
+uintptr_t __CFISAForTypeID( CFTypeID cf_id );
+
+/* PureFoundation - end */
 
 #define __CFMaxRuntimeTypes	65535
 
diff -ru CF-476.19/CFLocale.c CF-476.19-patched/CFLocale.c
--- CF-476.19/CFLocale.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFLocale.c	2012-10-09 15:56:57.000000000 +0200
@@ -979,5 +979,30 @@
 CONST_STRING_DECL(kCFHebrewCalendar, "hebrew")
 CONST_STRING_DECL(kCFChineseCalendar, "chinese")
 
+// PureFoundation -- 10/2/09 -- _sjc_
+CONST_STRING_DECL(NSBuddhistCalendar, "buddhist")
+CONST_STRING_DECL(NSChineseCalendar, "chinese")
+CONST_STRING_DECL(NSGregorianCalendar, "gregorian")
+CONST_STRING_DECL(NSHebrewCalendar, "hebrew")
+CONST_STRING_DECL(NSIslamicCalendar, "islamic")
+CONST_STRING_DECL(NSIslamicCivilCalendar, "islamic-civil")
+CONST_STRING_DECL(NSJapaneseCalendar, "japanese")
+CONST_STRING_DECL(NSLocaleCalendar, "locale:calendarref")
+// PureFoundation -- 12/2/09 -- _sjc_
+CONST_STRING_DECL(NSLocaleIdentifier, "locale:id")
+CONST_STRING_DECL(NSLocaleLanguageCode, "locale:language code")
+CONST_STRING_DECL(NSLocaleCountryCode, "locale:country code")
+CONST_STRING_DECL(NSLocaleScriptCode, "locale:script code")
+CONST_STRING_DECL(NSLocaleVariantCode, "locale:variant code")
+CONST_STRING_DECL(NSLocaleExemplarCharacterSet, "locale:exemplar characters")
+CONST_STRING_DECL(NSLocaleCollationIdentifier, "collation")
+CONST_STRING_DECL(NSLocaleUsesMetricSystem, "locale:uses metric")
+CONST_STRING_DECL(NSLocaleMeasurementSystem, "locale:measurement system")
+CONST_STRING_DECL(NSLocaleDecimalSeparator, "locale:decimal separator")
+CONST_STRING_DECL(NSLocaleGroupingSeparator, "locale:grouping separator")
+CONST_STRING_DECL(NSLocaleCurrencySymbol, "locale:currency symbol")
+CONST_STRING_DECL(NSLocaleCurrencyCode, "currency")
+// PureFoundation -- END
+
 #undef kMaxICUNameSize
 
diff -ru CF-476.19/CFLocale.h CF-476.19-patched/CFLocale.h
--- CF-476.19/CFLocale.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFLocale.h	2012-10-09 15:56:57.000000000 +0200
@@ -176,6 +176,31 @@
 CF_EXPORT const CFStringRef kCFIslamicCivilCalendar AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;
 CF_EXPORT const CFStringRef kCFJapaneseCalendar AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;
 
+// PureFoundation -- 10/2/09 -- _sjc_
+CF_EXPORT const CFStringRef NSBuddhistCalendar;
+CF_EXPORT const CFStringRef NSChineseCalendar;
+CF_EXPORT const CFStringRef NSGregorianCalendar;
+CF_EXPORT const CFStringRef NSHebrewCalendar;
+CF_EXPORT const CFStringRef NSIslamicCalendar;
+CF_EXPORT const CFStringRef NSIslamicCivilCalendar;
+CF_EXPORT const CFStringRef NSJapaneseCalendar;
+CF_EXPORT const CFStringRef NSLocaleCalendar;
+// PureFoundation -- 12/2/09 -- _sjc_
+CF_EXPORT const CFStringRef NSLocaleIdentifier;
+CF_EXPORT const CFStringRef NSLocaleLanguageCode;
+CF_EXPORT const CFStringRef NSLocaleCountryCode;
+CF_EXPORT const CFStringRef NSLocaleScriptCode;
+CF_EXPORT const CFStringRef NSLocaleVariantCode;
+CF_EXPORT const CFStringRef NSLocaleExemplarCharacterSet;
+CF_EXPORT const CFStringRef NSLocaleCalendar;
+CF_EXPORT const CFStringRef NSLocaleCollationIdentifier;
+CF_EXPORT const CFStringRef NSLocaleUsesMetricSystem;
+CF_EXPORT const CFStringRef NSLocaleMeasurementSystem;
+CF_EXPORT const CFStringRef NSLocaleDecimalSeparator;
+CF_EXPORT const CFStringRef NSLocaleGroupingSeparator;
+CF_EXPORT const CFStringRef NSLocaleCurrencySymbol;
+CF_EXPORT const CFStringRef NSLocaleCurrencyCode;
+// PureFoundation -- END
 
 CF_EXTERN_C_END
 
Seulement dans CF-476.19-patched/: CFNotificationCenter.c
Seulement dans CF-476.19-patched/: CFNotificationCenter.h
diff -ru CF-476.19/CFNumber.c CF-476.19-patched/CFNumber.c
--- CF-476.19/CFNumber.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFNumber.c	2012-10-09 15:56:57.000000000 +0200
@@ -77,6 +77,9 @@
 
 __private_extern__ void __CFBooleanInitialize(void) {
     __kCFBooleanTypeID = _CFRuntimeRegisterClass(&__CFBooleanClass);
+	/* PureFoundation - start _sjc_ */
+	_CFRuntimeBridgeClasses( __kCFBooleanTypeID, "NSCFBoolean" );
+	/* PureFoundation - end */   
     _CFRuntimeSetInstanceTypeID(&__kCFBooleanTrue, __kCFBooleanTypeID);
     __kCFBooleanTrue._base._cfisa = __CFISAForTypeID(__kCFBooleanTypeID);
     _CFRuntimeSetInstanceTypeID(&__kCFBooleanFalse, __kCFBooleanTypeID);
@@ -864,6 +867,10 @@
 
 __private_extern__ void __CFNumberInitialize(void) {
     __kCFNumberTypeID = _CFRuntimeRegisterClass(&__CFNumberClass);
+    
+	/* PureFoundation - start _sjc */   
+	_CFRuntimeBridgeClasses( __kCFNumberTypeID, "NSCFNumber" );
+	/* PureFoundation - end */
 
     _CFRuntimeSetInstanceTypeID(&__kCFNumberNaN, __kCFNumberTypeID);
     __kCFNumberNaN._base._cfisa = __CFISAForTypeID(__kCFNumberTypeID);
diff -ru CF-476.19/CFPreferences.h CF-476.19-patched/CFPreferences.h
--- CF-476.19/CFPreferences.h	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFPreferences.h	2012-10-09 15:56:57.000000000 +0200
@@ -136,6 +136,11 @@
 CF_EXPORT
 CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
 
+/*just a stub for puredarwin, for compatibility
+ * must really search in source from where is it called and patch here
+ * this is not the place to do this
+ */
+CF_EXPORT Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);
 
 CF_EXTERN_C_END
 
diff -ru CF-476.19/CFRuntime.c CF-476.19-patched/CFRuntime.c
--- CF-476.19/CFRuntime.c	2009-08-10 22:32:50.000000000 +0200
+++ CF-476.19-patched/CFRuntime.c	2012-10-10 02:33:27.160490360 +0200
@@ -39,6 +39,11 @@
 #include <unistd.h>
 #include "auto_stubs.h"
 
+/* PureFoundation - start rafi
+ * Needed for the inline : "CF_INLINE int CFTYPE_IS_OBJC" */
+#include <objc/message.h>
+/* PureFoundation - end */
+
 #define __CFRecordAllocationEvent(a, b, c, d, e) ((void)0)
 
 enum {
@@ -48,6 +53,14 @@
 __kCFReleaseEvent = 29
 };
 
+// PureFoundation -- 9/2/09 -- _sjc_
+CONST_STRING_DECL(NSGenericException, "NSGenericException")
+CONST_STRING_DECL(NSRangeException, "NSRangeException")
+CONST_STRING_DECL(NSInvalidArgumentException, "NSInvalidArgumentException")
+CONST_STRING_DECL(NSInternalInconsistencyException, "NSInternalInconsistencyException")
+CONST_STRING_DECL(NSMallocException, "NSMallocException")
+// PureFoundation - end
+
 #include <malloc/malloc.h>
 
 extern void __HALT(void);
@@ -178,10 +191,97 @@
     return __CFRuntimeClassTableCount - 1;
 }
 
+/* PureFoundation - start _sjc 
+ * "PureFoundation" alterations designed to reinstate the CF-Foundation
+ * bridge. Set up a table of CFTypeID-Foundation Class pointers pairs,  
+ * used to populate the _cfisa/ISA pointer of bridged CF objects
+ * Not great code. eg. not currently 64-bit safe.
+ */
+
+//void _CFRuntimeBridgeClasses(CFTypeID cf_typeID, const char *objc_classname) {
+//    return;
+//}
+
+#define PF_BTS 32
+struct __PFBridgeTableStruct {
+	CFTypeID	id;
+	Class	class;
+};
+struct __PFBridgeTableStruct _PFBridgeTable[PF_BTS];
+static int _PFBridgeCount = 0;
+
+/* PureFoundation
+ * Write a CFTypeID-Foundation class pair into the _PFBridgeTable. 
+ * Uses the obj-c runtime to look up the class pointer.
+ *
+ * This is currently called from +[NSObject load] 
+ * in "PureFoundation"'s Foundation.framework.
+ * However, this means that eg. string objects declared as @""s 
+ * are not bridged.
+ */
+
 void _CFRuntimeBridgeClasses(CFTypeID cf_typeID, const char *objc_classname) {
-    return;
+	//fprintf(stderr,"%s\n", __func__);
+	//fprintf(stderr,"\t SET  CFTypeID %d", cf_typeID);
+	
+	if( _PFBridgeCount == PF_BTS ) return;
+
+	Class cls = (Class)objc_getClass(objc_classname);
+
+	if( cls != nil )
+	{
+		//fprintf(stderr,"\t Class  %d\t Classname %s\n", cls, objc_classname);
+		_PFBridgeTable[_PFBridgeCount].id = cf_typeID;
+		_PFBridgeTable[_PFBridgeCount].class = cls;
+		_PFBridgeCount++;
+	}
+  return;
+}
+
+/* PureFoundation
+ * Search _PFBridgeTable for the class pointer which corresponds to the 
+ * given CFTypeID. Yes, it would have been much faster to just use the 
+ * type id as an index into the table, but then it would probably need 
+ * about 260 gaps, most of which aren't used.
+ */
+ 
+uintptr_t __CFISAForTypeID( CFTypeID cf_id ) {
+	//fprintf(stderr,"%s\n", __func__);
+    //fprintf(stderr,"\t  GET CFTypeID %d",cf_id);
+
+	if(_PFBridgeCount != 0)
+	{
+		for( int i = 0; i < _PFBridgeCount; i++ )
+		{
+			if( cf_id == _PFBridgeTable[i].id )
+			{
+				//fprintf(stderr,"\t Class  %d\t loop: %d\n", _PFBridgeTable[i].class, i );
+				return (uintptr_t)_PFBridgeTable[i].class;
+			}
+		}
+	}
+	//fprintf(stderr,"\tReturning a 0 ISA\n");
+	return 0;
 }
 
+/* PureFoundation 
+ * _sjc_ :
+ *	Search for an object class in the _PFBridgeTable. Called by the CFTYPE_IS_OBJC macro. This
+ *	is the simplest solution I could come up with. In an ideal world we could just compare 
+ *	_cfisa to 0, but somewhere along the way it seems to get stomped.
+ * 
+ * bool _PFIsObjCObject( CFTypeRef obj ) ...
+ *
+ * rafi :
+ * Backport CF-550 macro instead,  with the CF_IS_OBJC
+ * macro used in opencflite, Cf CFInternal.h 
+ * PFIsObject bridges all CF type to NS and not only NS to CF (based 
+ * on the pf6 patch).
+ * 
+ */
+ 
+/* PureFoundation - end */
+
 const CFRuntimeClass * _CFRuntimeGetClassWithTypeID(CFTypeID typeID) {
     return __CFRuntimeClassTable[typeID];
 }
@@ -311,10 +411,31 @@
 #define __CFGenericAssertIsCF(cf) \
     CFAssert2(cf != NULL && (NULL != __CFRuntimeClassTable[__CFGenericTypeID_inline(cf)]) && (__kCFNotATypeTypeID != __CFGenericTypeID_inline(cf)) && (__kCFTypeTypeID != __CFGenericTypeID_inline(cf)), __kCFLogAssertion, "%s(): pointer %p is not a CF object", __PRETTY_FUNCTION__, cf);
 
-#define CFTYPE_IS_OBJC(obj) (false)
-#define CFTYPE_OBJC_FUNCDISPATCH0(rettype, obj, sel) do {} while (0)
+/* PureFoundation - start rafi 
+ * Macro from CF-550 need a real CFTYPE_IS_OBJC.
+ */
+
+//#define CFTYPE_IS_OBJC(obj) (false)
+//#define CFTYPE_OBJC_FUNCDISPATCH0(rettype, obj, sel) do {} while (0)
+
+CF_INLINE int CFTYPE_IS_OBJC(const void *obj) {
+    CFTypeID typeID = __CFGenericTypeID_inline(obj);
+    return CF_IS_OBJC(typeID, obj);
+}
+
+
+#define CFTYPE_OBJC_FUNCDISPATCH0(rettype, obj, sel) \
+	if (CFTYPE_IS_OBJC(obj)) \
+	{rettype (*func)(void *, SEL) = (rettype (*)(void *, SEL))objc_msgSend; \
+	static SEL s = NULL; if (!s) s = sel_registerName(sel); \
+	return func((void *)obj, s);}
+
+	
 #define CFTYPE_OBJC_FUNCDISPATCH1(rettype, obj, sel, a1) do {} while (0)
 
+/* PureFoundation - end */
+
+
 CFTypeID CFGetTypeID(CFTypeRef cf) {
 #if defined(DEBUG)
     if (NULL == cf) HALT;
@@ -552,7 +673,12 @@
 }
 
 CFHashCode CFHash(CFTypeRef cf) {
-    CFTYPE_OBJC_FUNCDISPATCH0(CFHashCode, cf, "hash");
+	/* PureFoundation - start _sjc 
+	 * Let all bridged objects have access to the CFHash functions*/
+	 	
+    //CFTYPE_OBJC_FUNCDISPATCH0(CFHashCode, cf, "hash");
+    
+	/* PureFoundation - end */   
     __CFGenericAssertIsCF(cf);
     return _CFHash(cf);
 }
@@ -706,12 +832,28 @@
         /*** _CFRuntimeCreateInstance() can finally be called generally after this line. ***/
 
 	__CFRuntimeClassTableCount = 7;
+	
+	/* PureFoundation - start _sjc 
+	 * Since CFString always grabs TypeID 7, and creates some strings itself, 
+	 * we'll create this bridge before __CFStringInitialize() */	 
+	_CFRuntimeBridgeClasses( 7, "NSCFString" );
+	_CFRuntimeBridgeClasses( 7, "NSCFConstantString" );
+	/* PureFoundation - end */
+	
 	__CFStringInitialize();		// CFString's TypeID must be 0x7, now and forever
 	__CFRuntimeClassTableCount = 16;
         __CFDictionaryInitialize();
         __CFArrayInitialize();
         __CFDataInitialize();
         __CFSetInitialize();
+        
+		/* PureFoundation - start _sjc */
+		_CFRuntimeBridgeClasses( CFArrayGetTypeID(), "NSCFArray" );
+		_CFRuntimeBridgeClasses( CFDictionaryGetTypeID(), "NSCFDictionary" );
+		_CFRuntimeBridgeClasses( CFDataGetTypeID(), "NSCFData" );
+		_CFRuntimeBridgeClasses( CFSetGetTypeID(), "NSCFSet" );
+		/* PureFoundation - end */
+
         __CFNullInitialize();		// See above for hard-coding of this position
         __CFBooleanInitialize();	// See above for hard-coding of this position
         __CFNumberInitialize();		// See above for hard-coding of this position
@@ -749,7 +891,46 @@
         __CFRunLoopTimerInitialize();
         __CFSocketInitialize();
 #endif
-
+		
+		__CFFileDescriptorInitialize();
+		__CFNotificationCenterInitialize();
+
+
+		/* PureFoundation - start _sjc 
+		* Bridge the remaining classes (I don't think that CF creates any of
+		* these classes for its own use between when they're initialized and
+		* here).
+		*/
+		_CFRuntimeBridgeClasses( CFErrorGetTypeID(), "NSError" );
+		_CFRuntimeBridgeClasses( CFURLGetTypeID(), "PFURL" );
+		_CFRuntimeBridgeClasses( CFRunLoopTimerGetTypeID(), "NSCFTimer" );
+		_CFRuntimeBridgeClasses( CFCalendarGetTypeID(), "NSCFCalendar" );
+		_CFRuntimeBridgeClasses( CFCharacterSetGetTypeID(), "NSCFCharacterSet" );
+		_CFRuntimeBridgeClasses( CFDataGetTypeID(), "NSCFData" );
+		_CFRuntimeBridgeClasses( CFDateGetTypeID(), "NSCFDate" );
+		_CFRuntimeBridgeClasses( CFLocaleGetTypeID(), "NSCFLocale" );
+		_CFRuntimeBridgeClasses( CFTimeZoneGetTypeID(), "NSCFTimeZone" );
+		_CFRuntimeBridgeClasses( CFReadStreamGetTypeID(), "NSCFInputStream" );
+		_CFRuntimeBridgeClasses( CFWriteStreamGetTypeID(), "NSCFOutputStream" );
+		/* set a static var for use in CFURL.c */
+		_PFNSURLClass = (Class)objc_getClass("NSURL");
+		/*	extend the bridge to compiler-produced constant strings */
+			uintptr_t *ptr = (uintptr_t *)objc_getClass("NSCFConstantString");
+			if (ptr) {
+				__CFConstantStringClassReference[0] = *ptr++;
+				__CFConstantStringClassReference[1] = *ptr++;
+				__CFConstantStringClassReference[2] = *ptr++;
+				__CFConstantStringClassReference[3] = *ptr++;
+				__CFConstantStringClassReference[4] = *ptr++;
+				__CFConstantStringClassReference[5] = *ptr++;
+				__CFConstantStringClassReference[6] = *ptr++;
+				__CFConstantStringClassReference[7] = *ptr++;
+				__CFConstantStringClassReference[8] = *ptr++;
+				__CFConstantStringClassReference[9] = *ptr++;
+				__CFConstantStringClassReference[10] = *ptr++;
+				__CFConstantStringClassReference[11] = NULL;
+			}
+		/* PureFoundation - end */
 
 #if DEPLOYMENT_TARGET_MACOSX
         {
diff -ru CF-476.19/CFSet.c CF-476.19-patched/CFSet.c
--- CF-476.19/CFSet.c	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CFSet.c	2012-10-09 15:56:57.000000000 +0200
@@ -1462,6 +1462,10 @@
     }
 }
 
+/* PureFoundation - start _sjc */
+bool _CFSetIsMutable(CFSetRef set) { return (__CFHashGetType(set) == __kCFHashMutable); }
+/* PureFoundation - end */
+
 #undef CF_OBJC_KVO_WILLCHANGE
 #undef CF_OBJC_KVO_DIDCHANGE
 
diff -ru CF-476.19/CFSet.h CF-476.19-patched/CFSet.h
--- CF-476.19/CFSet.h	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CFSet.h	2012-10-09 15:56:57.000000000 +0200
@@ -500,6 +500,10 @@
 CF_EXPORT
 void CFSetRemoveAllValues(CFMutableSetRef theSet);
 
+/* PureFoundation - start _sjc */
+CF_EXPORT bool _CFSetIsMutable(CFSetRef set);
+/* PureFoundation - end */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFSET__ */
diff -ru CF-476.19/CFString.c CF-476.19-patched/CFString.c
--- CF-476.19/CFString.c	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CFString.c	2012-10-09 20:31:57.184921212 +0200
@@ -5784,6 +5784,10 @@
 
 
 
+/* PureFoundation - start _sjc */
+bool __CFStringIsMutable( CFStringRef str ) { return __CFStrIsMutable(str); }
+/* PureFoundation - end */
+
 #undef HANGUL_SBASE
 #undef HANGUL_LBASE
 #undef HANGUL_VBASE
@@ -5794,3 +5798,13 @@
 #undef HANGUL_TCOUNT
 #undef HANGUL_NCOUNT
 
+Boolean
+CFStringTransform (CFMutableStringRef str, CFRange *range,
+  CFStringRef transform, Boolean reverse)
+{
+  return true;
+}
+
+
+
+
diff -ru CF-476.19/CFString.h CF-476.19-patched/CFString.h
--- CF-476.19/CFString.h	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CFString.h	2012-10-10 01:02:48.656598391 +0200
@@ -692,6 +692,7 @@
 
 You can pass one of the predefined transforms below, or any valid ICU transform ID as defined in the ICU User Guide. Note that we do not support arbitrary set of ICU transform rules.
 */
+CF_EXPORT
 Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse) AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;
 
 /* Transform identifiers for CFStringTransform()
@@ -837,6 +838,10 @@
 CF_EXPORT
 CFStringRef  __CFStringMakeConstantString(const char *cStr);	/* Private; do not use */
 
+/* PureFoundation - start _sjc */
+CF_EXPORT bool __CFStringIsMutable( CFStringRef str );
+/* PureFoundation - end */
+
 CF_EXTERN_C_END
 
 #endif /* ! __COREFOUNDATION_CFSTRING__ */
diff -ru CF-476.19/CFURL.c CF-476.19-patched/CFURL.c
--- CF-476.19/CFURL.c	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CFURL.c	2012-10-09 15:56:57.000000000 +0200
@@ -42,6 +42,31 @@
 #include <sys/types.h>
 #endif
 
+
+/* PureFoundation - start _sjc 
+ * Re-define certain macros to allow obj-c message dispatch */
+#include <objc/runtime.h>
+#include <objc/message.h>
+
+#undef CF_IS_OBJC
+#undef CF_OBJC_CALL0
+#undef CF_OBJC_FUNCDISPATCH0
+
+#define CF_IS_OBJC(typeID, obj) (_PFIsNSURL(obj))
+
+#define CF_OBJC_CALL0(rettype, retvar, obj, sel) retvar = (rettype)objc_msgSend((id)obj, sel_getUid(sel))
+
+#define CF_OBJC_FUNCDISPATCH0(typeID, rettype, obj, sel) if(_PFIsNSURL((CFTypeRef)obj)) return (rettype)objc_msgSend((id)obj, sel_getUid(sel))
+
+bool _PFIsNSURL(CFTypeRef obj)
+{
+	//	CFLog(0, CFSTR("\n_PFIsNSURL !!!\n\n"));
+	//	fprintf(stderr,"\t_PFIsNSURL\n");
+	return (*(Class *)obj == _PFNSURLClass) ? TRUE : FALSE;
+}
+/* PureFoundation - end */
+
+
 static CFArrayRef HFSPathToURLComponents(CFStringRef path, CFAllocatorRef alloc, Boolean isDir);
 static CFArrayRef WindowsPathToURLComponents(CFStringRef path, CFAllocatorRef alloc, Boolean isDir);
 static CFStringRef WindowsPathToURLPath(CFStringRef path, CFAllocatorRef alloc, Boolean isDir);
@@ -4213,4 +4238,19 @@
     return url;
 }
 
+/* PureFoundation - start _sjc 
+ * Restore the macros re-defined above to their values from CFInternal.h 
+ * 
+ * rafi - change CF_IS_OBJ to the actual value in CFInternal.h */
+
+#undef CF_IS_OBJC
+#undef CF_OBJC_CALL0
+#undef CF_OBJC_FUNCDISPATCH0
+
+#define CF_IS_OBJC(typeID, obj) (((CFRuntimeBase *)(obj))->_cfisa != NULL && ((CFRuntimeBase *)(obj))->_cfisa != __CFISAForTypeID(typeID))
+#define CF_OBJC_CALL0(rettype, retvar, obj, sel) do { } while(0)
+#define CF_OBJC_FUNCDISPATCH0(typeID, rettype, obj, sel) do { } while(0)
+/* PureFoundation - end */
+
+
 
diff -ru CF-476.19/CoreFoundation.h CF-476.19-patched/CoreFoundation.h
--- CF-476.19/CoreFoundation.h	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/CoreFoundation.h	2012-10-09 15:56:57.000000000 +0200
@@ -71,10 +71,12 @@
 #include <CoreFoundation/CFDateFormatter.h>
 #include <CoreFoundation/CFDictionary.h>
 #include <CoreFoundation/CFError.h>
+#include <CoreFoundation/CFFileDescriptor.h>
 #include <CoreFoundation/CFLocale.h>
 #include <CoreFoundation/CFLogUtilities.h>
 #include <CoreFoundation/CFMachPort.h>
 #include <CoreFoundation/CFMessagePort.h>
+#include <CoreFoundation/CFNotificationCenter.h>
 #include <CoreFoundation/CFNumber.h>
 #include <CoreFoundation/CFNumberFormatter.h>
 #include <CoreFoundation/CFPlugIn.h>
Seulement dans CF-476.19-patched/: CoreFoundation_Prefix.h
diff -ru CF-476.19/ForFoundationOnly.h CF-476.19-patched/ForFoundationOnly.h
--- CF-476.19/ForFoundationOnly.h	2009-08-10 22:32:51.000000000 +0200
+++ CF-476.19-patched/ForFoundationOnly.h	2012-10-09 15:56:57.000000000 +0200
@@ -70,6 +70,16 @@
 CF_EXPORT const CFStringRef _kCFBundleInitialPathKey;
 CF_EXPORT const CFStringRef _kCFBundleResolvedPathKey;
 CF_EXPORT const CFStringRef _kCFBundlePrincipalClassKey;
+// PureFoundation -- _sjc_ -- 9/2/09
+CF_EXPORT const CFStringRef _kCFBundleResourceSpecificationKey;
+
+CF_EXPORT const CFStringRef NSGenericException;
+CF_EXPORT const CFStringRef NSRangeException;
+CF_EXPORT const CFStringRef NSInvalidArgumentException;
+CF_EXPORT const CFStringRef NSInternalInconsistencyException;
+
+CF_EXPORT const CFStringRef NSMallocException;
+// PureFoundation -- END
 
 CF_EXPORT CFArrayRef _CFFindBundleResources(CFBundleRef bundle, CFURLRef bundleURL, CFStringRef subDirName, CFArrayRef searchLanguages, CFStringRef resName, CFArrayRef resTypes, CFIndex limit, UInt8 version);
 
