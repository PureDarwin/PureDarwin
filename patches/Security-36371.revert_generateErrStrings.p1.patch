diff -ru Security-36371/lib/generateErrStrings.pl Security-36371.pd1/lib/generateErrStrings.pl
--- Security-36371/lib/generateErrStrings.pl	2008-06-10 05:46:36.000000000 +0200
+++ Security-36371.pd1/lib/generateErrStrings.pl	2012-09-12 10:08:38.313725143 +0200
@@ -21,62 +21,23 @@
 # 
 # @APPLE_LICENSE_HEADER_END@
 #
-# generateErrStrings.pl - create error strings files from the Security header files
+# generatorX.pl - create error strings files from the Security header files
 #
-# Usage:
-#
-#	perl generateErrStrings.pl <GENDEBUGSTRS?> <NAME_OF_STRINGS_FILE> <input files>
-#
-#	Currently supported files are SecBase.h, SecureTransport.h,cssmapple.h,
-#	cssmerr.h and Authorization.h. These are used by:
-#
-#		void cssmPerror(const char *how, CSSM_RETURN error);
-#	
-#	which is in SecBase.cpp.
-#
-# Paths of input files:
+# John Hurley, Summer 2003. Based on generator.pl, Perry The Cynic, Fall 1999.
 #
-#	./libsecurity_authorization/lib/Authorization.h
-#	./libsecurity_cssm/lib/cssmapple.h
-#	./libsecurity_cssm/lib/cssmerr.h
-#	./libsecurity_keychain/lib/SecBase.h
-#	./libsecurity_ssl/lib/SecureTransport.h
-#
-# Sample run:
-#
-#	perl generateErrStrings.pl "YES" "SecErrorMessages.strings" Authorization.h SecBase.h \
-#		cssmapple.h cssmerr.h SecureTransport.h
-#
-# Input to script: header file(s) containing enum declarations
-# Output: C++ program with one cout statement per decl
+# Usage:
+#	perl generatorX.pl input-directory output-directory <files>
 #
-# The input headers are scanned for enums containing error numbers and
-# optional comments. Only certain prefixes for the identifiers in the
-# enums are considered, to avoid non-error message type defines. See
-# the line in the file with CSSM_ERRCODE for acceptable prefixes.
+#	Currently supported files are SecBase.h, SecureTransport.h and Authorization.h
 #
-# There are three styles of comments that this script parses:
+#	perl generatorX.pl `pwd` `pwd` SecBase2.h SecureTransport2.h Authorization.h
 #
-#	Style A [see /System/Library/Frameworks/Security.framework/Headers/SecBase.h]:
+#	Input will be like:
 #
 #		errSSLProtocol				= -9800,	/* SSL protocol error */
+#		errSSLNegotiation			= -9801,	/* Cipher Suite negotiation failure */
 #
-#	Style B [see /System/Library/Frameworks/Security.framework/Headers/cssmapple.h]:
-#
-#		/* a code signature match failed */
-#		CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = CSSM_CSP_PRIVATE_ERROR + 2,
-#
-#	Style C [see /System/Library/Frameworks/Security.framework/Headers/cssmerr.h]:
-#
-#		CSSM_CSSM_BASE_CSSM_ERROR =
-#			CSSM_CSSM_BASE_ERROR + CSSM_ERRORCODE_COMMON_EXTENT + 0x10,
-#		CSSMERR_CSSM_SCOPE_NOT_SUPPORTED =				CSSM_CSSM_BASE_CSSM_ERROR + 1,
-#
-# Style A has the comment after the comment. Style has the comment before the value,
-# and Style C has no comment. In cases where both Style A and B apply, the
-# comment at the end of the line is used.
-#
-# The final output after the generated Objective-C++ program is run looks like:
+#	Output should be like (in Unicode):
 #
 #		/* errSSLProtocol */
 #		"-9800" = "SSL protocol error";
@@ -84,268 +45,108 @@
 #		/* errSSLNegotiation */
 #		"-9801" = "Cipher Suite negotiation failure";
 #
-# The appropriate byte order marker for UTF-16 is written to the start of the file.
-# Note that the list of errors must be numerically unique across all input files, 
-# or the strings file will be invalid. Comments in "Style B" may span multiple lines.
-# C++ style comments are not supported. Any single or double quote in a comment is
-# converted to a "-" in the output.
-#
-# The English versions of the error messages can be seen with:
+# Note that the list of errors must be numerically unique across all input files, or the strings file
+# will be invalid.Comments that span multiple lines will be ignored, as will lines with no comment. C++
+# style comments are not supported.
 #
-#	cat /System/Library/Frameworks/Security.framework/Resources/English.lproj/SecErrorMessages.strings
-#
-# find -H -X -x . -name "*.h" -print0 2>/dev/null | xargs -0 grep -ri err
-# -----------------------------------------------------------------------------------
 
-# Style questions:
-#	- what should I make PROGNAME?
-#	- should I use a special call to make the temp file in the .mm file?
-#
+#for puredarin sept 2012
+#replacement for generateErrStrings from Security-36371 with Foundation dep.
+#based on perl script from Security-29000 series
 
 #use strict;
-#use warnings;
+use Encode;
 
-die "Usage:  $0 <gendebug> <tmpdir> <.strings file> <list of headers>\n" if ($#ARGV < 3);
 
-$GENDEBUGSTRINGS=$ARGV[0];			# If "YES", include all strings & don't localize 
-$TMPDIR=$ARGV[1];					# temporary directory for program compile, link, run
-$TARGETSTR=$ARGV[2];				# path of .strings file, e.g. 
-									#	${DERIVED_SRC}/English.lproj/SecErrorMessages.strings
-@INPUTFILES=@ARGV[3 .. 9999];		# list of input files
+#GENDEBUGSTRINGS no implemented, for compatibility
+$GENDEBUGSTRINGS=$ARGV[0];		# If "YES", include all strings & don't localize
+
+$FRAMEWORK=$ARGV[1];				# directory containing Security.framework
 
+$TARGETFILE=$ARGV[2];			    # where to put the output file
+
+@INPUTFILES=@ARGV[3 .. 9999];		# list of input files
 $#INPUTFILES = $#ARGV - 3;			# truncate to actual number of files
 
-print "gend: $GENDEBUGSTRINGS, tmpdir: $TMPDIR, targetstr: $TARGETSTR\n";
-$PROGNAME="${TMPDIR}/generateErrStrings.mm";
-open PROGRAM,"> $PROGNAME"  or die "can't open $PROGNAME: $!";
-select PROGRAM;
-
-printAdditionalIncludes();
-printInputIncludes();
-printMainProgram();
+
+#my $INPUTFILE=$ARGV[3];				# list of input files
+
+my $tabs = "\t\t\t";	# argument indentation (noncritical)
+my $warning = "This file was automatically generated. Do not edit on penalty of futility!";
+
+#
+# Read error headers into memory (all just concatenated blindly)
+#
+#open(ERR, "$INPUTFILE") or die "Cannot open $INPUTFILE";
+#$/=undef;	# big gulp mode
+#$_ = <ERR>;
+#close(ERR);
 
 # -----------------------------------------------------------------------------------
 # Parse error headers and build array of all relevant lines
 open(ERR, "cat " . join(" ", @INPUTFILES) . "|") or die "Cannot open error header files";
 $/="\};";	#We set the section termination string - very important
-processInput();
+$/=undef;	# big gulp mode
+$_ = <ERR>;
 close(ERR);
 # -----------------------------------------------------------------------------------
 
-printTrailer();
-select STDOUT;
-close PROGRAM;
-
-compileLinkAndRun();
-
-# 4: Done!
-exit;
+#
+# Prepare output file
+#
+open(OUT, ">$TARGETFILE") or die "Cannot write $TARGETFILE: $^E";
+my $msg = "//\n// Security error code tables.\n// $warning\n//\n";
 
-# -----------------------------------------------------------------------------------
-#			Subroutines
-# -----------------------------------------------------------------------------------
 
-sub processInput
-{
-	# 3: Read input, process each line, output it.
-	while ( $line = <ERR>)
-	{
-		($enum) = ($line =~ /\n\s*enum\s*{\s*([^}]*)};/);
-		while ($enum ne '')	#basic filter for badly formed enums
-		{
-			#Drop leading whitespace
-			$enum =~ s/^\s+//;
-	#	print "A:", $enum,"\n";
-			($leadingcomment) = ($enum =~ m%^(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)%);
-			if ($leadingcomment ne '')
-			{	
-				$enum = substr($enum, length($leadingcomment));
-				$leadingcomment = substr($leadingcomment, 2);		# drop leading "/*"
-				$leadingcomment = substr($leadingcomment, 0, -2);	# drop trailing "*/"
-				$leadingcomment = cleanupComment($leadingcomment);
-			}
-			next if ($enum eq '');	#basic filter for badly formed enums
-			
-			# Check for C++ style comments at start of line
-			if ($enum =~ /\s*(\/\/)/)
-			{
-				#Drop everything before the end of line
-				$enum =~ s/[^\n]*[\n]*//;
-				next;
-			}
-			($identifier) = ($enum =~ /\s*([_A-Za-z][_A-Za-z0-9]*)/);
-			
-#			print "identifier: ", $identifier,"\n" if ($identifier ne '');
-			
-			#Drop everything before the comma
-			$enum =~ s/[^,]*,//;
-	
-			# Now look for trailing comment. We only consider them
-			# trailing if they come before the end of the line
-			($trailingcomment) = ($enum =~ /^[ \t]*\/\*((.)*)?\*\//);
-		#	($trailingcomment) = ($enum =~ m%^(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)%);
-			$trailingcomment = cleanupComment($trailingcomment);
-			
-			#Drop everything before the end of line
-			$enum =~ s/[^\n]*[\n]*//;
-	#	print "B:", $enum,"\n";
-	#	print "lc:$leadingcomment, id:$identifier, tc:$trailingcomment\n";
-	#	print "===========================================\n";
-		
-			writecomment($leadingcomment, $identifier, $trailingcomment);
-		}	
-	}
-}
-
-sub writecomment
+#
+# Extract errors from accumulated header text. Format:
+#   errBlahWhatever = number, /* text */
+#
+my @errorlines =
+	m{(?:^\s*)(err[Sec|Authorization|SSL]\w+)(?:\s*=\s*)(-?\d+)(?:\s*,?\s*)(?:/\*\s*)(.*)(?:\*/)(?:$\s*)}gm;
+while (my $errx = shift @errorlines)
 {
-	# Leading comment, id, trailing comment
-	# To aid localizers, we will not output a line with no comment
-	#
-	# Output is e.g.
-	#	tmp << "/* errAuthorizationSuccess */\n\"" << errAuthorizationSuccess 
-	#		<< "\" = \"The operation completed successfully.\"\n" << endl;
-	
-	my($mylc,$myid,$mytc) = @_;
-	if ($myid =~ /(CSSM_ERRCODE|CSSMERR_|errSec|errCS|errAuth|errSSL)[_A-Za-z][_A-Za-z0-9]*/)
-	{
-		$errormessage = '';
-		if ($mytc ne '')
-		{	$errormessage = $mytc; }
-		elsif ($mylc ne '')
-		{	$errormessage = $mylc; }
-		elsif ($GENDEBUGSTRINGS eq "YES")
-		{	$errormessage = $myid; }
-		
-		if ($errormessage ne '')
-		{
-			print "\ttmp << \"/* ", $myid, " */\\n\\\"\" << ";
-			print $myid, " << \"\\\" = \\\"";
-			print $errormessage, "\\\";\\n\" << endl;\n";
-		}
-	}
+    my $value = shift @errorlines;	# or die;
+    my $str = shift @errorlines;	# or die;
+    $str =~ s/\s*$//;		# drop trailing white space
+    if ( $value != 0)  		# can't output duplicate error codes
+    {
+        $msg = $msg . "\n/* $errx */\n\"$value\" = \"$str\";\n";
+    }
 };
+$msg = $msg . "\n";
 
- 
-sub printAdditionalIncludes
-{
-	#This uses the "here" construct to dump out lines verbatim
-	print <<"AdditionalIncludes";
-
-#include <iostream>
-#include <fstream>
-#include <CoreFoundation/CoreFoundation.h>
-#include <Foundation/Foundation.h>
-
-using namespace std;
-AdditionalIncludes
-}
-
-sub printInputIncludes
-{
-	#Now "#include" each of the input files
-	print "\n#include \"$_\"" foreach @INPUTFILES;
-	print "\n";
-}
-
-sub printMainProgram
-{
-	#Output the main part of the program using the "here" construct
-	print <<"MAINPROGRAM";
-
-void writeStrings(const char *stringsFileName);
-void createStringsTemp();
-
-int main (int argc, char * const argv[])
-{
-	const char *stringsFileName = NULL;
-   
-	if (argc == 2)
-		stringsFileName = argv[1];
-	else
-	if (argc == 1)
-		stringsFileName = "SecErrorMessages.strings";
-	else
-		return -1;
-
-	cout << "Strings file to create: " << stringsFileName << endl;
-	createStringsTemp();
-	writeStrings(stringsFileName);
-}
 
-void writeStrings(const char *stringsFileName)
-{
-	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
-	NSFileHandle *fh = [NSFileHandle fileHandleForReadingAtPath:@"generateErrStrings.tmp"];
-	NSData *rawstrings = [fh readDataToEndOfFile];
-	UInt32 encoding = CFStringConvertEncodingToNSStringEncoding (kCFStringEncodingUTF8);
-	NSString *instring = [[NSString alloc] initWithData:rawstrings encoding:(NSStringEncoding)encoding];
-	
-	/* temporary fix to avoid relocalization of two specific strings which have already been fixed in header files */
-	if (instring)
-	{
-		instring = [instring stringByReplacingOccurrencesOfString:@"\\\"-2147408896\\\" = \\\"Host name mismatch\\\"" withString:@"\\\"-2147408896\\\" = \\\"mismatch between Cert-s common name and app-specified host name\\\""];
-		instring = [instring stringByReplacingOccurrencesOfString:@"\\\"-2147408883\\\" = \\\"Cannot find appropriate CRL\\\"" withString:@"\\\"-2147408883\\\" = \\\"Can-t find appropriate CRL\\\""];
-	}
-
-
-	if (instring)
-	{
-		NSString *path = [NSString stringWithUTF8String:stringsFileName];
-		NSFileManager *fm = [NSFileManager defaultManager];
-		if ([fm fileExistsAtPath:path])
-			[fm removeFileAtPath:path handler:nil];
-		BOOL bx = [fm createFileAtPath:path contents:nil attributes:nil];
-		NSFileHandle *fs = [NSFileHandle fileHandleForWritingAtPath:path];
-		[fs writeData:[instring dataUsingEncoding:NSUnicodeStringEncoding]];
-	}
-
-	[pool release];
-}
-
-void createStringsTemp()
-{
-	ofstream tmp("generateErrStrings.tmp") ; 
-
-MAINPROGRAM
-}
-
-sub cleanupComment
-{
-	my $comment = shift @_;
-#	print "A:",$comment,"\n";
-	if ($comment ne '')
-	{
-		$comment =~ s/\s\s+/ /g; 	# Squeeze multiple spaces to one
-		$comment =~ s/^\s+//;		# Drop leading whitespace
-		$comment =~ s/\s+$//;		# Drop trailing whitespace
-		$comment =~ s/[\'\"]/-/g; 	# Replace quotes with -
-	}
-#	print "B:",$comment,"\n";
-	$comment;
-}    
+#
+# Extract errors from CSSM headers. Format:
+#  CSSMERR_whatever = some compile-time C expression
+# [We just build a C program and running it. So sue us.]
+#
+my $PROG = "/tmp/cssmerrors.$$.c";
+my $PROGB = "/tmp/cssmerrors.$$";
 
-sub printTrailer
-{
-	print "	tmp.close();\n";
-	print "}\n";
+open(PROG, ">$PROG") or die "Cannot open $PROG";
+print PROG <<END;
+#include <Security/cssmerr.h>
+#include <Security/cssmapple.h>
+#include <stdio.h>
+int main() {
+END
+@errorlines =
+	m{(?:^\s*)CSSMERR_([A-Z_]+)\s+=}gm;
+for my $error (@errorlines) {
+	print PROG "printf(\"\\n/* CSSMERR_$error */\\n\\\"%ld\\\" = \\\"$error\\\";\\n\", CSSMERR_$error);\n";
 }
+print PROG "}\n";
+close(PROG);
 
-sub compileLinkAndRun
-{
-	$status = system( <<"MAINPROGRAM");
-(cd ${TMPDIR} ; /usr/bin/cc -x objective-c++  -pipe -Wno-trigraphs -fpascal-strings -fasm-blocks -g -O0 -Wreturn-type -fmessage-length=0 -F$ENV{'BUILT_PRODUCTS_DIR'} -I$ENV{'BUILT_PRODUCTS_DIR'}/SecurityPieces/Headers -I$ENV{'BUILT_PRODUCTS_DIR'}/SecurityPieces/PrivateHeaders -c generateErrStrings.mm -o generateErrStrings.o)
-MAINPROGRAM
-	die "$compile exited funny: $?" unless $status == 0;
-
-	$status = system( <<"LINKERSTEP");
-(cd ${TMPDIR} ; /usr/bin/g++ -o generateErrStrings generateErrStrings.o -framework Foundation )
-LINKERSTEP
-	die "$linker exited funny: $?" unless $status == 0;
-
-	$status = system( <<"RUNSTEP");
-(cd ${TMPDIR} ; ./generateErrStrings $TARGETSTR )
-RUNSTEP
-	die "$built program exited funny: $?" unless $status == 0;
-}
+system("cc", "-o", $PROGB, $PROG, "-I$FRAMEWORK/SecurityPieces/Headers") == 0 or die "cannot build CSSM collector";
+open(PROGR, "$PROGB|") or die "Cannot run CSSM collector";
+$msg .= <PROGR>;
+close(PROGR);
 
+#
+# Write output file and clean up
+#
+print OUT encode("UTF-16", $msg,  Encode::FB_PERLQQ);
+close(OUT);
