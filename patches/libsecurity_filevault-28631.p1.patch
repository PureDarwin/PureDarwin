diff -ru libsecurity_filevault-28631/lib/FVDIHLInterface.cpp libsecurity_filevault-28631.pd1/lib/FVDIHLInterface.cpp
--- libsecurity_filevault-28631/lib/FVDIHLInterface.cpp	2006-07-11 00:40:28.000000000 +0200
+++ libsecurity_filevault-28631.pd1/lib/FVDIHLInterface.cpp	2012-09-11 23:58:26.510452402 +0200
@@ -81,11 +81,11 @@
     _dihlDIInitialize = (_dihlDIInitializeProc *)CFBundleGetFunctionPointerForName(bundleRef, CFSTR("DIInitialize"));
     _dihlDIDeinitialize = (_dihlDIDeinitializeProc *)CFBundleGetFunctionPointerForName(bundleRef, CFSTR("DIDeinitialize"));
     _dihlDiskImageCompact = (_dihlDiskImageCompactProc *)CFBundleGetFunctionPointerForName(bundleRef, CFSTR("DIHLDiskImageCompact"));
-
+/*
     if (_dihlDiskImageAttach==NULL || _dihlDiskImageCreate==NULL || _dihlDiskImageChangePassword==NULL || _dihlDIInitialize==NULL ||
         _dihlDIDeinitialize==NULL || _dihlDiskImageCompact==NULL)
         MacOSError::throwMe(kUnsupportedFunctionErr);
-        
+*/        
     return true;
 }
 
diff -ru libsecurity_filevault-28631/lib/FVDIHLInterface.h libsecurity_filevault-28631.pd1/lib/FVDIHLInterface.h
--- libsecurity_filevault-28631/lib/FVDIHLInterface.h	2006-07-11 00:40:28.000000000 +0200
+++ libsecurity_filevault-28631.pd1/lib/FVDIHLInterface.h	2012-09-11 23:58:26.514452402 +0200
@@ -24,14 +24,14 @@
  */
 
 #include <CoreFoundation/CoreFoundation.h>
-#include <DiskImages/DIHLInterface.h>
+//#include <DiskImages/DIHLInterface.h>
 
-typedef OSStatus _dihlDiskImageCreateProc(CFDictionaryRef inOptions, DIHLStatusProcPtr inStatusProc, void *inContext,
+typedef OSStatus _dihlDiskImageCreateProc(CFDictionaryRef inOptions, void * inStatusProc, void *inContext,
     CFDictionaryRef *outResults);
-typedef OSStatus _dihlDiskImageAttachProc(CFDictionaryRef inOptions, DIHLStatusProcPtr inStatusProc, void *inContext,
+typedef OSStatus _dihlDiskImageAttachProc(CFDictionaryRef inOptions, void * inStatusProc, void *inContext,
     CFDictionaryRef *outResults);
 typedef OSStatus _dihlDiskImageChangePasswordProc(CFDictionaryRef inOptions);
-typedef OSStatus _dihlDiskImageCompactProc(CFDictionaryRef inOptions, void *inContext, DIHLStatusProcPtr inStatusProc);
+typedef OSStatus _dihlDiskImageCompactProc(CFDictionaryRef inOptions, void *inContext, void * inStatusProc);
 
 // From DIHighLevelAPI.h
 typedef int _dihlDIInitializeProc();
diff -ru libsecurity_filevault-28631/lib/SFFileVault.cpp libsecurity_filevault-28631.pd1/lib/SFFileVault.cpp
--- libsecurity_filevault-28631/lib/SFFileVault.cpp	2006-07-11 00:40:28.000000000 +0200
+++ libsecurity_filevault-28631.pd1/lib/SFFileVault.cpp	2012-09-11 23:58:26.514452402 +0200
@@ -34,10 +34,10 @@
 #include <security_utilities/errors.h>
 
 #include <CoreServices/../Frameworks/CarbonCore.framework/Headers/MacErrors.h>
-#include <DiskImages/DIHLInterface.h>
-#include <DiskImages/DIHighLevelAPI.h>
-#include <DiskImages/DIConstants.h>
-#include <DiskImages/DIHLInterfacePriv.h>
+//#include <DiskImages/DIHLInterface.h>
+//#include <DiskImages/DIHighLevelAPI.h>
+//#include <DiskImages/DIConstants.h>
+//#include <DiskImages/DIHLInterfacePriv.h>
 #include <syslog.h>
 #include <unistd.h>
 #include <sys/param.h>
@@ -88,10 +88,10 @@
 	*outMountPoint = NULL;
 
 	// Don't show in Finder as a separate volume	
-	CFDictionarySetValue(input, kDIHLAttachMountNoBrowseKey, kCFBooleanTrue);
+	//CFDictionarySetValue(input, kDIHLAttachMountNoBrowseKey, kCFBooleanTrue);
 	
 	// To not ignore permissions on the mounted image
-	CFDictionarySetValue(input, kDIHLAttachMountEnablePermKey, kCFBooleanTrue);
+	//CFDictionarySetValue(input, kDIHLAttachMountEnablePermKey, kCFBooleanTrue);
 	
 	// if you want -nomount
 //	CFDictionarySetValue(input, kDIHLAttachMountRequiredKey, kCFBooleanFalse);
@@ -108,37 +108,37 @@
 //	CFDictionarySetValue(input, kDIHLAttachAutoOpenRWKey, kCFBooleanFalse);
 		
 	// if you want to specify mountpoint
-    if (inMountPoint)
-		CFDictionarySetValue(input, kDIHLAttachMountPointKey, inMountPoint);
+//    if (inMountPoint)
+//		CFDictionarySetValue(input, kDIHLAttachMountPointKey, inMountPoint);
 
 	// to specify image
-	CFDictionarySetValue(input, kDIHLAttachURLKey, imageURL);
+//	CFDictionarySetValue(input, kDIHLAttachURLKey, imageURL);
 
     // Mark as a system-image
-    CFDictionarySetValue(driveOptions, kDIHLAttachDriveOptionSystemImageKey, kCFBooleanTrue);
+//    CFDictionarySetValue(driveOptions, kDIHLAttachDriveOptionSystemImageKey, kCFBooleanTrue);
 
     // Mark as being used as a FileVault image
     CFDictionarySetValue(driveOptions, CFSTR("filevault-image"), kCFBooleanTrue);
 
 	// to specify passphrase
-    if (password)
-        CFDictionarySetValue(imageOptions, CFSTR(kDIPassphraseKey), password);
+//    if (password)
+//        CFDictionarySetValue(imageOptions, CFSTR(kDIPassphraseKey), password);
 
 	// to specify image options
-	if (CFDictionaryGetCount(imageOptions) > 0)
-        CFDictionarySetValue(input, kDIHLAttachImageOptionsKey, imageOptions);
+//	if (CFDictionaryGetCount(imageOptions) > 0)
+//        CFDictionarySetValue(input, kDIHLAttachImageOptionsKey, imageOptions);
     
 	// to specify drive options
-	if (CFDictionaryGetCount(driveOptions) > 0)
-        CFDictionarySetValue(input, kDIHLAttachDriveOptionsKey, driveOptions);
+//	if (CFDictionaryGetCount(driveOptions) > 0)
+//        CFDictionarySetValue(input, kDIHLAttachDriveOptionsKey, driveOptions);
     
-    if (certificateOrArray)
-        CFDictionarySetValue(input, CFSTR(kDICertificatesKey), certificateOrArray);
+//    if (certificateOrArray)
+//        CFDictionarySetValue(input, CFSTR(kDICertificatesKey), certificateOrArray);
     
 	CFDictionaryRef output = NULL;	// This is created with CFDictionaryCreateCopy, so we are responsible for release
     SFDIHLStarter dihlstarter;
 //	OSStatus status = (*FVDIHLInterface::DIHLDiskImageAttach()((const CFDictionaryRef)input, (DIHLStatusProcPtr)NULL /* statusProc */, (void *)0L, &output);
-	OSStatus status = (*FVDIHLInterface::DIHLDiskImageAttach())(input, (DIHLStatusProcPtr)NULL /* statusProc */, NULL, &output);
+	OSStatus status = NULL; //(*FVDIHLInterface::DIHLDiskImageAttach())(input, (DIHLStatusProcPtr)NULL /* statusProc */, NULL, &output);
     if (status)
     {
 		if (output)
@@ -213,7 +213,7 @@
         &kCFTypeDictionaryValueCallBacks));
 	CFRef<CFMutableDictionaryRef> imageOptions(CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks,
         &kCFTypeDictionaryValueCallBacks));
-
+/*
     CFDictionarySetValue(inOptions, kDIHLChangePassphraseImageURLKey, dmgin);
 	CFDictionarySetValue(inOptions, kDIHLChangePassphraseImageOptionsKey, imageOptions);		// DI seems to need at least an empty one
     if (oldPassword)
@@ -223,14 +223,14 @@
 
     if (masterKeychainPath)
         CFDictionarySetValue(inOptions, kDIHLChangePassphraseRecoveryKey, masterKeychainPath);
-
+*/
 #if !defined(NDEBUG)
     const char *debugVal = getenv("FILEVAULT_DEBUG");
-	if (debugVal)
+/*	if (debugVal)
     {
         CFDictionarySetValue(inOptions, kDIHLCreateDebugKey, kCFBooleanTrue);
         CFDictionarySetValue(inOptions, kDIHLCreateVerboseKey, kCFBooleanTrue);
-	}
+	}*/
 #endif
 
     SFDIHLStarter dihlstarter;
@@ -317,9 +317,9 @@
  
 //  CFDictionarySetValue(createTargetOptions, kDIHLCreateTargetPasswordKey, password);
 //  CFDictionarySetValue(createTargetOptions, kDIHLCreateTargetEncryptionKey, CFSTR("CEncryptedEncoding"));
-    if (password)
-        CFDictionarySetValue(createTargetOptions, CFSTR(kDIPassphraseKey), password);
-    CFDictionarySetValue(createTargetOptions, CFSTR(kDIEncryptionClassKey), CFSTR("CEncryptedEncoding"));
+//    if (password)
+//        CFDictionarySetValue(createTargetOptions, CFSTR(kDIPassphraseKey), password);
+//    CFDictionarySetValue(createTargetOptions, CFSTR(kDIEncryptionClassKey), CFSTR("CEncryptedEncoding"));
 
     // ---------------------------------
     // Make the create-target-spec key
@@ -327,7 +327,7 @@
     CFRef<CFMutableDictionaryRef> createTargetSpec(CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks,
         &kCFTypeDictionaryValueCallBacks));
 	CFRef<CFNumberRef> numSectors(CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &sectors));
-
+/*
     CFDictionarySetValue(createTargetSpec, kDIHLCreateTargetSectorsKey, numSectors);
     CFDictionarySetValue(createTargetSpec, kDIHLCreateTargetURLKey, dmgout);
     CFDictionarySetValue(createTargetSpec, kDIHLCreateTargetImageTypeKey, kDIHLCreateTargetSparseValue);
@@ -337,7 +337,7 @@
 		CFDictionarySetValue(createTargetSpec, kDIHLCreateTargetCertificatesKey, certificateOrArray);	// CFData or CFArray of CFData's
     
     CFDictionarySetValue(operation, kDIHLCreateTargetSpecKey, createTargetSpec);	// Put createTarget dictionary in operation dictionary
-
+*/
     // ---------------------------------
     // Make the create-content-spec key
     // ---------------------------------
@@ -349,7 +349,7 @@
 	CFRef<CFNumberRef> groupID(CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &gid));
 
 	CFRef<CFStringRef> filesystem(_SFFileVaultCopyFileSystemPersonalityForImage(dmgout));
-	CFDictionarySetValue(nbiSpec, kDIHLCreateNBIFileSystemKey, filesystem);	 		// rdar://problem/3969147
+/*	CFDictionarySetValue(nbiSpec, kDIHLCreateNBIFileSystemKey, filesystem);	 		// rdar://problem/3969147
     CFDictionarySetValue(nbiSpec, kDIHLCreateNBIVolNameKey, volumeName);
     CFDictionarySetValue(nbiSpec, kDIHLCreateNBIUIDKey, userID);
     CFDictionarySetValue(nbiSpec, kDIHLCreateNBIGIDKey, groupID);
@@ -363,14 +363,14 @@
     if (password)
         CFDictionarySetValue(operation, CFSTR(kDIPassphraseKey), password);			// needed to prevent SecAgent UI (yes, password is there twice)
     CFDictionarySetValue(operation, kDIHLAgentKey, kDIHLHDIUTILAgentValue);
-    
+*/
 #if !defined(NDEBUG)
     const char *debugVal = getenv("FILEVAULT_DEBUG");
-	if (debugVal)
+/*	if (debugVal)
     {
         CFDictionarySetValue(operation, kDIHLCreateDebugKey, kCFBooleanTrue);
         CFDictionarySetValue(operation, kDIHLCreateVerboseKey, kCFBooleanTrue);
-	}
+	}*/
 #endif
 
     CFDictionaryRef outResults = NULL;
@@ -546,27 +546,27 @@
 	CFRef<CFMutableDictionaryRef> imageOptions(CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks,
         &kCFTypeDictionaryValueCallBacks));
 
-    CFDictionarySetValue(inOptions, kDIHLAgentKey, kDIHLAttachHDIUTILAgentValue);
+/*    CFDictionarySetValue(inOptions, kDIHLAgentKey, kDIHLAttachHDIUTILAgentValue);
 
 	// kDIHLCompactPassphraseKey is defined, but never used by DIHL code
 	CFDictionarySetValue(imageOptions, CFSTR(kDIPassphraseKey), password?password:CFSTR(""));
-
+*/
 #if !defined(NDEBUG)
 	const char *debugVal = getenv("FILEVAULT_DEBUG");
-	if (debugVal)
+/*	if (debugVal)
     {
         CFDictionarySetValue(inOptions, kDIHLCreateDebugKey, kCFBooleanTrue);
         CFDictionarySetValue(inOptions, kDIHLCreateVerboseKey, kCFBooleanTrue);
-	}
+	}*/
 #endif
 
-	CFDictionarySetValue(imageOptions, CFSTR(kDIBackingStoreWriteableKey), kCFBooleanTrue);
+/*	CFDictionarySetValue(imageOptions, CFSTR(kDIBackingStoreWriteableKey), kCFBooleanTrue);
 
     CFDictionarySetValue(inOptions, kDIHLCompactImageURLKey, dmgin);
 	// to specify image options
 	if (CFDictionaryGetCount(imageOptions) > 0)
         CFDictionarySetValue(inOptions, kDIHLCompactImageOptionsKey, imageOptions);
-
+*/
     SFDIHLStarter dihlstarter;
     
     OSStatus status = (*FVDIHLInterface::DIHLDiskImageCompact())(inOptions, NULL, NULL);
@@ -601,7 +601,7 @@
 
 CFStringRef SFFileVault::extractDevicepath(CFDictionaryRef devTable)
 {
-    CFArrayRef sysEntities = static_cast<CFArrayRef>(CFDictionaryGetValue(devTable,kDIHLAttachNewSystemEntitiesKey));
+    CFArrayRef sysEntities = NULL; //static_cast<CFArrayRef>(CFDictionaryGetValue(devTable,kDIHLAttachNewSystemEntitiesKey));
     if (sysEntities == NULL)
         return NULL;
 
@@ -615,8 +615,8 @@
 		// and/or we could be using Apple_HFSX
 		// 
 		// the proper thing to do is to look for the dev node corresponding to a mount point
-		if (CFDictionaryGetValue(dict, kDIHLAttachNewMountPointKey)) 
-        	return CFStringCreateCopy(kCFAllocatorDefault, (CFStringRef)CFDictionaryGetValue(dict,kDIHLAttachNewDevEntryKey));
+		//if (CFDictionaryGetValue(dict, kDIHLAttachNewMountPointKey)) 
+        	//return CFStringCreateCopy(kCFAllocatorDefault, (CFStringRef)CFDictionaryGetValue(dict,kDIHLAttachNewDevEntryKey));
     }
     return NULL;
 }
