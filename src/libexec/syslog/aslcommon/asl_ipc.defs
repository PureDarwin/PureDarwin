/*
 * Copyright (c) 2007-2011 Apple Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */

#include <mach/std_types.defs>
#include <mach/mach_types.defs>

subsystem asl_ipc 114;
serverprefix _;

import <sys/types.h>;

type ooline_data = ^ array [] of MACH_MSG_TYPE_BYTE
	ctype : caddr_t;

skip; /* removed: _asl_server_query */

skip; /* removed: _asl_server_query_timeout */

skip; /* removed: _asl_server_prune */

routine _asl_server_create_aux_link
(
	server : mach_port_t;
	message : ooline_data, dealloc;
	out fileport : mach_port_move_send_t;
	out url : ooline_data, dealloc;
	out status : int;
	ServerAuditToken token : audit_token_t
);

simpleroutine _asl_server_message
(
	server : mach_port_t;
	message : ooline_data, dealloc;
	ServerAuditToken token : audit_token_t
);

simpleroutine _asl_server_register_direct_watch
(
	server : mach_port_t;
	port : int;
	ServerAuditToken token : audit_token_t
);

simpleroutine _asl_server_cancel_direct_watch
(
	server : mach_port_t;
	port : int;
	ServerAuditToken token : audit_token_t
);

routine _asl_server_query_2
(
	server : mach_port_t;
	request : ooline_data, dealloc;
	startid : uint64_t;
	count : int;
	flags : int;
	out reply : ooline_data, dealloc;
	out lastid : uint64_t;
	out status : int;
	ServerAuditToken token : audit_token_t
);

routine _asl_server_match
(
	server : mach_port_t;
	request : ooline_data, dealloc;
	startid : uint64_t;
	count : uint64_t;
	duration : uint32_t;
	direction : int;
	out reply : ooline_data, dealloc;
	out lastid : uint64_t;
	out status : int;
	ServerAuditToken token : audit_token_t
);
