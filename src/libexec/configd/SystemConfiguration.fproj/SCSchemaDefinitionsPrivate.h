/*
 * Copyright (c) 2000-2020 Apple Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this
 * file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_LICENSE_HEADER_END@
 */

/*
 * This file is automatically generated
 * DO NOT EDIT!
 */

/*
 * Generic Keys
 *
 *   kSCPropNetIgnoreLinkStatus                         "IgnoreLinkStatus"             CFBoolean
 *   kSCPropConfirmedInterfaceName                      "ConfirmedInterfaceName"       CFString
 *   kSCPropDisableUntilNeeded                          "DisableUntilNeeded"           CFNumber (0 or 1)
 *   kSCPropDisablePrivateRelay                         "DisablePrivateRelay"          CFNumber (0 or 1)
 *
 * Preference Keys
 *
 *   kSCPrefVersion                                     "__VERSION__"                  CFString
 *   kSCPrefVirtualNetworkInterfaces                    "VirtualNetworkInterfaces"     CFDictionary
 *
 * Network Entity Keys
 *
 *   kSCEntNetAppLayer                                  "AppLayer"                     CFDictionary
 *   kSCEntNetCaptivePortal                             "CaptivePortal"                CFDictionary
 *   kSCEntNetCommCenter                                "com.apple.CommCenter"         CFDictionary
 *   kSCEntNetEAPOL                                     "EAPOL"                        CFDictionary
 *   kSCEntNetIdleRoute                                 "IdleRoute"
 *   kSCEntNetInterfaceActiveDuringSleepRequested       "ActiveDuringSleepRequested"   CFDictionary
 *   kSCEntNetInterfaceActiveDuringSleepSupported       "ActiveDuringSleepSupported"   CFDictionary
 *   kSCEntNetInterfaceDelegation                       "InterfaceDelegation"
 *   kSCEntNetIPv4ARPCollision                          "IPv4ARPCollision"
 *   kSCEntNetIPv4PortInUse                             "PortInUse"
 *   kSCEntNetIPv4RouterARPFailure                      "IPv4RouterARPFailure"
 *   kSCEntNetIPv4RouterARPAlive                        "IPv4RouterARPAlive"
 *   kSCEntNetIPv6RouterExpired                         "IPv6RouterExpired"
 *   kSCEntNetLinkIssues                                "LinkIssues"                   CFDictionary
 *   kSCEntNetLinkQuality                               "LinkQuality"                  CFDictionary
 *   kSCEntNetLoopback                                  "Loopback"                     CFDictionary
 *   kSCEntNetNAT64                                     "NAT64"                        CFDictionary
 *   kSCEntNetNAT64PrefixRequest                        "NAT64PrefixRequest"
 *   kSCEntNetOnDemand                                  "OnDemand"                     CFDictionary
 *   kSCEntNetQoSMarkingPolicy                          "QoSMarkingPolicy"             CFDictionary
 *   kSCEntNetRefreshConfiguration                      "RefreshConfiguration"
 *   kSCEntNetService                                   "__SERVICE__"                  CFDictionary
 *   kSCEntNetVPN                                       "VPN"                          CFDictionary
 *
 * kSCEntNetCommCenter Entity Keys
 *
 *   kSCPropNetCommCenterAllowNetworkAccess             "AllowNetworkAccess"           CFNumber (0 or 1)
 *   kSCPropNetCommCenterAvailable                      "Available"                    CFNumber (0 or 1)
 *
 * kSCEntNetDNS Entity Keys
 *
 *   kSCPropNetDNSConfirmedServiceID                    "ConfirmedServiceID"           CFString
 *   kSCPropNetDNSServiceIdentifier                     "ServiceIdentifier"            CFNumber
 *   kSCPropNetDNSSupplementalMatchDomainsNoSearch      "SupplementalMatchDomainsNoSearch" CFNumber (0 or 1)
 *
 * kSCEntNetCaptivePortal Entity Keys
 *
 *   kSCPropNetCaptivePortalURL                         "URL"                          CFString
 *
 * kSCEntNetEthernet (Hardware) Entity Keys
 *
 *   kSCPropNetEthernetCapabilityAV                     "AV"                           CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityJUMBO_MTU              "JUMBO_MTU"                    CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityLRO                    "LRO"                          CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityRXCSUM                 "RXCSUM"                       CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityTSO                    "TSO"                          CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityTSO4                   "TSO4"                         CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityTSO6                   "TSO6"                         CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityTXCSUM                 "TXCSUM"                       CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityVLAN_HWTAGGING         "VLAN_HWTAGGING"               CFNumber (0 or 1)
 *   kSCPropNetEthernetCapabilityVLAN_MTU               "VLAN_MTU"                     CFNumber (0 or 1)
 *
 * kSCEntNetInterface Entity Keys
 *
 *   --- kSCPropNetInterfaceType values ---
 *   kSCValNetInterfaceTypeCellular                     "Cellular"
 *   kSCValNetInterfaceTypeLoopback                     "Loopback"
 *   kSCValNetInterfaceTypeVPN                          "VPN"
 *
 *   kSCPropNetIPSecDisconnectOnWake                    "DisconnectOnWake"             CFNumber (0 or 1)
 *   kSCPropNetIPSecDisconnectOnWakeTimer               "DisconnectOnWakeTimer"        CFNumber
 * kSCEntNetIPSec Entity Keys
 *
 *   kSCPropNetIPSecLastCause                           "LastCause"                    CFNumber
 *
 *   --- OnDemand: ---
 *   kSCPropNetIPSecOnDemandEnabled                     "OnDemandEnabled"              CFNumber (0 or 1)
 *   kSCPropNetIPSecOnDemandMatchDomainsAlways          "OnDemandMatchDomainsAlways"   CFArray[CFString]
 *   kSCPropNetIPSecOnDemandMatchDomainsOnRetry         "OnDemandMatchDomainsOnRetry"  CFArray[CFString]
 *   kSCPropNetIPSecOnDemandMatchDomainsNever           "OnDemandMatchDomainsNever"    CFArray[CFString]
 *
 * kSCEntNetIPv4 Entity Keys
 *
 *   kSCPropNetIPv4AdditionalRoutes                     "AdditionalRoutes"             CFArray[CFDictionary]
 *   kSCPropNetIPv4ARPResolvedHardwareAddress           "ARPResolvedHardwareAddress"   CFString
 *   kSCPropNetIPv4ARPResolvedIPAddress                 "ARPResolvedIPAddress"         CFString
 *   kSCPropNetIPv4CLAT46                               "CLAT46"                       CFBoolean
 *   kSCPropNetIPv4ExcludedRoutes                       "ExcludedRoutes"               CFArray[CFDictionary]
 *   kSCPropNetIPv4IncludedRoutes                       "IncludedRoutes"               CFArray[CFDictionary]
 *
 *   --- kSCPropNetIPv4ConfigMethod values ---
 *   kSCValNetIPv4ConfigMethodFailover                  "Failover"
 *
 *   --- kSCPropNetIPv4AdditionalRoutes, kSCPropNetIPv4ExcludedRoutes, kSCPropNetIPv4IncludedRoutes [CFDictionary] keys ---
 *   kSCPropNetIPv4RouteDestinationAddress              "DestinationAddress"           CFString
 *   kSCPropNetIPv4RouteSubnetMask                      "SubnetMask"                   CFString
 *   kSCPropNetIPv4RouteGatewayAddress                  "GatewayAddress"               CFString
 *   kSCPropNetIPv4RouteInterfaceName                   "InterfaceName"                CFString
 *
 * kSCEntNetIPv6 Entity Keys
 *
 *   kSCPropNetIPv6AdditionalRoutes                     "AdditionalRoutes"             CFArray[CFDictionary]
 *   kSCPropNetIPv6EnableCGA                            "EnableCGA"                    CFNumber (0 or 1)
 *   kSCPropNetIPv6ExcludedRoutes                       "ExcludedRoutes"               CFArray[CFDictionary]
 *   kSCPropNetIPv6IncludedRoutes                       "IncludedRoutes"               CFArray[CFDictionary]
 *   kSCPropNetIPv6LinkLocalAddress                     "LinkLocalAddress"             CFString
 *   kSCPropNetIPv6PerformPLATDiscovery                 "PerformPLATDiscovery"         CFBoolean
 *
 *   --- kSCPropNetIPv6AdditionalRoutes, kSCPropNetIPv6IncludedRoutes, kSCPropNetIPv6ExcludedRoutes [CFDictionary] keys ---
 *   kSCPropNetIPv6RouteDestinationAddress              "DestinationAddress"           CFString
 *   kSCPropNetIPv6RoutePrefixLength                    "PrefixLength"                 CFNumber
 *   kSCPropNetIPv6RouteGatewayAddress                  "GatewayAddress"               CFString
 *   kSCPropNetIPv6RouteInterfaceName                   "InterfaceName"                CFString
 *
 * kSCEntNetLink Entity Keys
 *
 *   kSCPropNetLinkExpensive                            "Expensive"                    CFBoolean
 *
 * kSCEntNetLinkIssues Entity Keys
 *
 *   kSCPropNetLinkIssuesModuleID                       "ModuleID"                     CFData
 *   kSCPropNetLinkIssuesInfo                           "Info"                         CFData
 *   kSCPropNetLinkIssuesTimeStamp                      "TimeStamp"                    CFDate
 *
 * kSCEntNetLinkQuality Entity Keys
 *
 *   kSCPropNetLinkQuality                              "LinkQuality"                  CFNumber
 *
 *   kSCPropNetPPPDisconnectOnWake                      "DisconnectOnWake"             CFNumber (0 or 1)
 *   kSCPropNetPPPDisconnectOnWakeTimer                 "DisconnectOnWakeTimer"        CFNumber
 * kSCEntNetPPP Entity Keys
 *
 *   --- OnDemand: ---
 *   kSCPropNetPPPOnDemandDomains                       "OnDemandDomains"              CFArray[CFString]
 *   kSCPropNetPPPOnDemandEnabled                       "OnDemandEnabled"              CFNumber (0 or 1)
 *   kSCPropNetPPPOnDemandHostName                      "OnDemandHostName"             CFString
 *   kSCPropNetPPPOnDemandMatchDomainsAlways            "OnDemandMatchDomainsAlways"   CFArray[CFString]
 *   kSCPropNetPPPOnDemandMatchDomainsOnRetry           "OnDemandMatchDomainsOnRetry"  CFArray[CFString]
 *   kSCPropNetPPPOnDemandMatchDomainsNever             "OnDemandMatchDomainsNever"    CFArray[CFString]
 *   kSCPropNetPPPOnDemandMode                          "OnDemandMode"                 CFString
 *   kSCPropNetPPPOnDemandPriority                      "OnDemandPriority"             CFString
 *
 *   --- kSCPropNetPPPOnDemandMode values ---
 *   kSCValNetPPPOnDemandModeAggressive                 "Aggressive"
 *   kSCValNetPPPOnDemandModeConservative               "Conservative"
 *   kSCValNetPPPOnDemandModeCompatible                 "Compatible"
 *
 *   --- kSCPropNetPPPOnDemandPriority values ---
 *   kSCValNetPPPOnDemandPriorityDefault                "Default"
 *   kSCValNetPPPOnDemandPriorityHigh                   "High"
 *   kSCValNetPPPOnDemandPriorityLow                    "Low"
 *
 * kSCEntNetNAT64 Entity Keys
 *
 *   kSCPropNetNAT64PrefixList                          "PrefixList"                   CFArray[CFString]
 *   kSCPropNetNAT64PLATDiscoveryStartTime              "PLATDiscoveryStartTime"       CFDate
 *   kSCPropNetNAT64PLATDiscoveryCompletionTime         "PLATDiscoveryCompletionTime"  CFDate
 *
 * kSCEntNetProxies Entity Keys
 *
 *   kSCPropNetProxiesTransportConverterEnable          "TransportConverterEnable"     CFNumber (0 or 1)
 *   kSCPropNetProxiesTransportConverterPort            "TransportConverterPort"       CFNumber
 *   kSCPropNetProxiesTransportConverterProxy           "TransportConverterProxy"      CFArray[CFString]
 *   kSCPropNetProxiesTransportConverterFallBackAllowed "TransportConverterFallBackAllowed" CFNumber (0 or 1)
 *   kSCPropNetProxiesTransportConverterMultipathServiceType "TransportConverterMultipathServiceType" CFNumber
 *   kSCPropNetProxiesTransportConverterTFOMode         "TransportConverterTFOMode"    CFNumber
 *
 *   kSCPropNetProxiesBypassAllowed                     "BypassAllowed"                CFNumber (0 or 1)
 *   kSCPropNetProxiesFallBackAllowed                   "FallBackAllowed"              CFNumber (0 or 1)
 *   kSCPropNetProxiesSupplementalMatchDomains          "SupplementalMatchDomains"     CFArray[CFString]
 *   kSCPropNetProxiesSupplementalMatchOrders           "SupplementalMatchOrders"      CFArray[CFNumber]
 *   kSCPropNetProxiesServiceSpecific                   "ServiceSpecific"              CFNumber (0 or 1)
 *
 *   kSCPropNetProxiesScoped                            "__SCOPED__"                   CFDictionary
 *   kSCPropNetProxiesServices                          "__SERVICES__"                 CFDictionary
 *   kSCPropNetProxiesSupplemental                      "__SUPPLEMENTAL__"             CFArray[CFDictionary]
 *   kSCPropNetProxiesSupplementalMatchDomain           "__MATCH_DOMAIN__"             CFString
 *
 * kSCEntNetQoSMarkingPolicy Entity Keys
 *
 *   kSCPropNetQoSMarkingAppleAudioVideoCalls           "QoSMarkingAppleAudioVideoCalls" CFBoolean
 *   kSCPropNetQoSMarkingEnabled                        "QoSMarkingEnabled"            CFBoolean
 *   kSCPropNetQoSMarkingWhitelistedAppIdentifiers      "QoSMarkingWhitelistedAppIdentifiers" CFArray[CFString]
 *
 * kSCEntNetService Entity Keys
 *
 *   kSCPropNetServicePrimaryRank                       "PrimaryRank"                  CFString
 *   kSCPropNetServiceServiceIndex                      "ServiceIndex"                 CFNumber
 *   kSCPropNetServiceUserDefinedName                   "UserDefinedName"              CFString
 *
 *   --- kSCPropNetServicePrimaryRank values ---
 *   kSCValNetServicePrimaryRankFirst                   "First"
 *   kSCValNetServicePrimaryRankLast                    "Last"
 *   kSCValNetServicePrimaryRankNever                   "Never"
 *   kSCValNetServicePrimaryRankScoped                  "Scoped"
 *
 * kSCEntNetVPN Entity Keys
 *
 *   kSCPropNetVPNAppRules                              "AppRules"                     CFArray[CFDictionary]
 *   kSCPropNetVPNAuthCredentialPassword                "AuthCredentialPassword"       CFString
 *   kSCPropNetVPNAuthName                              "AuthName"                     CFString
 *   kSCPropNetVPNAuthPassword                          "AuthPassword"                 CFString
 *   kSCPropNetVPNAuthPasswordEncryption                "AuthPasswordEncryption"       CFString
 *   kSCPropNetVPNAuthPasswordPluginType                "AuthPasswordPluginType"       CFString
 *   kSCPropNetVPNAuthenticationMethod                  "AuthenticationMethod"         CFString
 *   kSCPropNetVPNConnectTime                           "ConnectTime"                  CFString
 *   kSCPropNetVPNDisconnectOnFastUserSwitch            "DisconnectOnFastUserSwitch"   CFNumber (0 or 1)
 *   kSCPropNetVPNDisconnectOnIdle                      "DisconnectOnIdle"             CFNumber (0 or 1)
 *   kSCPropNetVPNDisconnectOnIdleTimer                 "DisconnectOnIdleTimer"        CFNumber
 *   kSCPropNetVPNDisconnectOnLogout                    "DisconnectOnLogout"           CFNumber (0 or 1)
 *   kSCPropNetVPNDisconnectOnSleep                     "DisconnectOnSleep"            CFNumber (0 or 1)
 *   kSCPropNetVPNDisconnectOnWake                      "DisconnectOnWake"             CFNumber (0 or 1)
 *   kSCPropNetVPNDisconnectOnWakeTimer                 "DisconnectOnWakeTimer"        CFNumber
 *   kSCPropNetVPNLocalCertificate                      "LocalCertificate"             CFData
 *   kSCPropNetVPNLogfile                               "Logfile"                      CFString
 *   kSCPropNetVPNMTU                                   "MTU"                          CFNumber
 *   kSCPropNetVPNOnDemandEnabled                       "OnDemandEnabled"              CFNumber (0 or 1)
 *   kSCPropNetVPNOnDemandMatchAppEnabled               "OnDemandMatchAppEnabled"      CFBoolean
 *   kSCPropNetVPNOnDemandMatchDomainsAlways            "OnDemandMatchDomainsAlways"   CFArray[CFString]
 *   kSCPropNetVPNOnDemandMatchDomainsOnRetry           "OnDemandMatchDomainsOnRetry"  CFArray[CFString]
 *   kSCPropNetVPNOnDemandMatchDomainsNever             "OnDemandMatchDomainsNever"    CFArray[CFString]
 *   kSCPropNetVPNOnDemandRules                         "OnDemandRules"                CFArray[CFDictionary]
 *   kSCPropNetVPNOnDemandSuspended                     "OnDemandSuspended"            CFNumber
 *   kSCPropNetVPNPluginCapability                      "PluginCapability"             CFString
 *   kSCPropNetVPNRemoteAddress                         "RemoteAddress"                CFString
 *   kSCPropNetVPNStatus                                "Status"                       CFNumber
 *   kSCPropNetVPNVerboseLogging                        "VerboseLogging"               CFNumber (0 or 1)
 *
 *   --- kSCPropNetVPNAppRules [CFDictionary] keys ---
 *   kSCValNetVPNAppRuleAccountIdentifierMatch          "AccountIdentifierMatch"       CFArray[CFString]
 *   kSCValNetVPNAppRuleDNSDomainMatch                  "DNSDomainMatch"               CFArray[CFString]
 *   kSCValNetVPNAppRuleExecutableMatch                 "ExecutableMatch"              CFArray[CFDictionary]
 *   kSCValNetVPNAppRuleIdentifier                      "Identifier"                   CFString
 *
 *   --- kSCValNetVPNAppRuleExecutableMatch [CFDictionary] keys ---
 *   kSCValNetVPNAppRuleExecutableDesignatedRequirement "DesignatedRequirement"        CFString
 *   kSCValNetVPNAppRuleExecutableSigningIdentifier     "SigningIdentifier"            CFString
 *   kSCValNetVPNAppRuleExecutableUUID                  "UUID"                         CFString
 *
 *   --- kSCPropNetVPNAuthenticationMethod values ---
 *   kSCValNetVPNAuthenticationMethodPassword           "Password"
 *   kSCValNetVPNAuthenticationMethodCertificate        "Certificate"
 *
 *   --- kSCPropNetVPNAuthPasswordEncryption values ---
 *   kSCValNetVPNAuthPasswordEncryptionExternal         "External"
 *   kSCValNetVPNAuthPasswordEncryptionKeychain         "Keychain"
 *   kSCValNetVPNAuthPasswordEncryptionPrompt           "Prompt"
 *
 *   --- kSCPropNetVPNOnDemandRules [CFDictionary] keys ---
 *   kSCPropNetVPNOnDemandRuleAction                    "Action"                       CFString
 *   kSCPropNetVPNOnDemandRuleActionParameters          "ActionParameters"             CFArray[CFDictionary]
 *   kSCPropNetVPNOnDemandRuleDNSDomainMatch            "DNSDomainMatch"               CFArray[CFString]
 *   kSCPropNetVPNOnDemandRuleDNSServerAddressMatch     "DNSServerAddressMatch"        CFArray[CFString]
 *   kSCPropNetVPNOnDemandRuleSSIDMatch                 "SSIDMatch"                    CFArray[CFString]
 *   kSCPropNetVPNOnDemandRuleInterfaceTypeMatch        "InterfaceTypeMatch"           CFString
 *   kSCPropNetVPNOnDemandRuleURLStringProbe            "URLStringProbe"               CFString
 *
 *   --- kSCPropNetVPNOnDemandRuleAction values ---
 *   kSCValNetVPNOnDemandRuleActionAllow                "Allow"
 *   kSCValNetVPNOnDemandRuleActionIgnore               "Ignore"
 *   kSCValNetVPNOnDemandRuleActionConnect              "Connect"
 *   kSCValNetVPNOnDemandRuleActionDisconnect           "Disconnect"
 *   kSCValNetVPNOnDemandRuleActionEvaluateConnection   "EvaluateConnection"
 *
 *   --- kSCPropNetVPNOnDemandRuleActionParameters [CFDictionary] keys ---
 *   kSCPropNetVPNOnDemandRuleActionParametersDomainAction "DomainAction"                 CFString
 *   kSCPropNetVPNOnDemandRuleActionParametersDomains   "Domains"                      CFArray[CFString]
 *   kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers "RequiredDNSServers"           CFArray[CFString]
 *   kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe "RequiredURLStringProbe"       CFString
 *
 *   --- kSCPropNetVPNOnDemandRuleActionParametersDomainAction values ---
 *   kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded "ConnectIfNeeded"
 *   kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect "NeverConnect"
 *
 *   --- kSCPropNetVPNOnDemandRuleInterfaceTypeMatch values ---
 *   kSCValNetVPNOnDemandRuleInterfaceTypeMatchCellular "Cellular"
 *   kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet "Ethernet"
 *   kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi     "WiFi"
 *
 *   --- kSCPropNetVPNPluginCapability values ---
 *   kSCValNetVPNPluginCapabilityAuth                   "Auth"
 *   kSCValNetVPNPluginCapabilityConnect                "Connect"
 *
 * kSCCompSystem Properties
 *
 *   kSCPropSystemComputerNameRegion                    "ComputerNameRegion"           CFNumber
 *   kSCPropSystemHostName                              "HostName"                     CFString
 *
 * Virtual Network Interface Keys
 *
 *   kSCPropVirtualNetworkInterfacesBondInterfaces      "Interfaces"                   CFArray[CFString]
 *   kSCPropVirtualNetworkInterfacesBondMode            "Mode"                         CFNumber
 *   kSCPropVirtualNetworkInterfacesBondOptions         "Options"                      CFDictionary
 *
 *   kSCPropVirtualNetworkInterfacesBridgeInterfaces    "Interfaces"                   CFArray[CFString]
 *   kSCPropVirtualNetworkInterfacesBridgeOptions       "Options"                      CFDictionary
 *
 *   kSCPropVirtualNetworkInterfacesVLANInterface       "Interface"                    CFString
 *   kSCPropVirtualNetworkInterfacesVLANTag             "Tag"                          CFNumber
 *   kSCPropVirtualNetworkInterfacesVLANOptions         "Options"                      CFDictionary
 */


#ifndef _SCSCHEMADEFINITIONSPRIVATE_H
#define _SCSCHEMADEFINITIONSPRIVATE_H

#include <SystemConfiguration/SCSchemaDefinitions.h>

/*!
 *	@header SCSchemaDefinitionsPrivate
 */

/*!
  @const kSCPropNetIgnoreLinkStatus
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetIgnoreLinkStatus                         API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIgnoreLinkStatus kSCPropNetIgnoreLinkStatus

/*!
  @const kSCPropConfirmedInterfaceName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropConfirmedInterfaceName                      API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropConfirmedInterfaceName kSCPropConfirmedInterfaceName

/*!
  @const kSCPropDisableUntilNeeded
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropDisableUntilNeeded                          API_AVAILABLE(macos(10.11)) SPI_AVAILABLE(ios(9.0), tvos(9.0), watchos(2.0), bridgeos(2.0));
#define kSCPropDisableUntilNeeded kSCPropDisableUntilNeeded

/*!
  @const kSCPropDisablePrivateRelay
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropDisablePrivateRelay                         API_AVAILABLE(macos(12.0)) SPI_AVAILABLE(ios(15.0), tvos(15.0), watchos(8.0), bridgeos(6.0));
#define kSCPropDisablePrivateRelay kSCPropDisablePrivateRelay

/*!
  @group Preference Keys
 */

/*!
  @const kSCPrefVersion
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPrefVersion                                     API_AVAILABLE(macos(10.15.4)) SPI_AVAILABLE(ios(13.4), tvos(13.4), watchos(6.2), bridgeos(4.0));
#define kSCPrefVersion kSCPrefVersion

/*!
  @const kSCPrefVirtualNetworkInterfaces
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPrefVirtualNetworkInterfaces                    API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPrefVirtualNetworkInterfaces kSCPrefVirtualNetworkInterfaces

/*!
  @group Network Entity Keys
 */

/*!
  @const kSCEntNetAppLayer
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetAppLayer                                  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetAppLayer kSCEntNetAppLayer

/*!
  @const kSCEntNetCaptivePortal
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetCaptivePortal                             SPI_AVAILABLE(macos(11.0), ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCEntNetCaptivePortal kSCEntNetCaptivePortal

/*!
  @const kSCEntNetCommCenter
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetCommCenter                                SPI_AVAILABLE(macos(10.6), ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetCommCenter kSCEntNetCommCenter

/*!
  @const kSCEntNetEAPOL
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetEAPOL                                     API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetEAPOL kSCEntNetEAPOL

/*!
  @const kSCEntNetIdleRoute
 */
extern const CFStringRef kSCEntNetIdleRoute                                 API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetIdleRoute kSCEntNetIdleRoute

/*!
  @const kSCEntNetInterfaceActiveDuringSleepRequested
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetInterfaceActiveDuringSleepRequested       API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetInterfaceActiveDuringSleepRequested kSCEntNetInterfaceActiveDuringSleepRequested

/*!
  @const kSCEntNetInterfaceActiveDuringSleepSupported
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetInterfaceActiveDuringSleepSupported       API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetInterfaceActiveDuringSleepSupported kSCEntNetInterfaceActiveDuringSleepSupported

/*!
  @const kSCEntNetInterfaceDelegation
 */
extern const CFStringRef kSCEntNetInterfaceDelegation                       API_AVAILABLE(macos(10.15)) SPI_AVAILABLE(ios(13.0), tvos(13.0), watchos(6.0), bridgeos(4.0));
#define kSCEntNetInterfaceDelegation kSCEntNetInterfaceDelegation

/*!
  @const kSCEntNetIPv4ARPCollision
 */
extern const CFStringRef kSCEntNetIPv4ARPCollision                          API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetIPv4ARPCollision kSCEntNetIPv4ARPCollision

/*!
  @const kSCEntNetIPv4PortInUse
 */
extern const CFStringRef kSCEntNetIPv4PortInUse                             API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetIPv4PortInUse kSCEntNetIPv4PortInUse

/*!
  @const kSCEntNetIPv4RouterARPFailure
 */
extern const CFStringRef kSCEntNetIPv4RouterARPFailure                      API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetIPv4RouterARPFailure kSCEntNetIPv4RouterARPFailure

/*!
  @const kSCEntNetIPv4RouterARPAlive
 */
extern const CFStringRef kSCEntNetIPv4RouterARPAlive                        API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetIPv4RouterARPAlive kSCEntNetIPv4RouterARPAlive

/*!
  @const kSCEntNetIPv6RouterExpired
 */
extern const CFStringRef kSCEntNetIPv6RouterExpired                         API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(11.0), tvos(11.0), watchos(4.0), bridgeos(2.0));
#define kSCEntNetIPv6RouterExpired kSCEntNetIPv6RouterExpired

/*!
  @const kSCEntNetLinkIssues
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetLinkIssues                                API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetLinkIssues kSCEntNetLinkIssues

/*!
  @const kSCEntNetLinkQuality
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetLinkQuality                               API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetLinkQuality kSCEntNetLinkQuality

/*!
  @const kSCEntNetLoopback
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetLoopback                                  API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetLoopback kSCEntNetLoopback

/*!
  @const kSCEntNetNAT64
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetNAT64                                     API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCEntNetNAT64 kSCEntNetNAT64

/*!
  @const kSCEntNetNAT64PrefixRequest
 */
extern const CFStringRef kSCEntNetNAT64PrefixRequest                        API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(11.0), tvos(11.0), watchos(4.0), bridgeos(2.0));
#define kSCEntNetNAT64PrefixRequest kSCEntNetNAT64PrefixRequest

/*!
  @const kSCEntNetOnDemand
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetOnDemand                                  API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetOnDemand kSCEntNetOnDemand

/*!
  @const kSCEntNetQoSMarkingPolicy
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetQoSMarkingPolicy                          API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCEntNetQoSMarkingPolicy kSCEntNetQoSMarkingPolicy

/*!
  @const kSCEntNetRefreshConfiguration
 */
extern const CFStringRef kSCEntNetRefreshConfiguration                      API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetRefreshConfiguration kSCEntNetRefreshConfiguration

/*!
  @const kSCEntNetService
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetService                                   API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetService kSCEntNetService

/*!
  @const kSCEntNetVPN
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCEntNetVPN                                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCEntNetVPN kSCEntNetVPN

/*!
  @group kSCEntNetCommCenter Entity Keys
 */

/*!
  @const kSCPropNetCommCenterAllowNetworkAccess
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetCommCenterAllowNetworkAccess             SPI_AVAILABLE(macos(10.6), ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetCommCenterAllowNetworkAccess kSCPropNetCommCenterAllowNetworkAccess

/*!
  @const kSCPropNetCommCenterAvailable
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetCommCenterAvailable                      SPI_AVAILABLE(macos(10.6), ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetCommCenterAvailable kSCPropNetCommCenterAvailable

/*!
  @group kSCEntNetDNS Entity Keys
 */

/*!
  @const kSCPropNetDNSConfirmedServiceID
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetDNSConfirmedServiceID                    API_AVAILABLE(macos(10.11)) SPI_AVAILABLE(ios(9.0), tvos(9.0), watchos(2.0), bridgeos(2.0));
#define kSCPropNetDNSConfirmedServiceID kSCPropNetDNSConfirmedServiceID

/*!
  @const kSCPropNetDNSServiceIdentifier
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetDNSServiceIdentifier                     API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetDNSServiceIdentifier kSCPropNetDNSServiceIdentifier

/*!
  @const kSCPropNetDNSSupplementalMatchDomainsNoSearch
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetDNSSupplementalMatchDomainsNoSearch      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetDNSSupplementalMatchDomainsNoSearch kSCPropNetDNSSupplementalMatchDomainsNoSearch

/*!
  @group kSCEntNetCaptivePortal Entity Keys
 */

/*!
  @const kSCPropNetCaptivePortalURL
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetCaptivePortalURL                         SPI_AVAILABLE(macos(11.0), ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetCaptivePortalURL kSCPropNetCaptivePortalURL

/*!
  @group kSCEntNetEthernet (Hardware) Entity Keys
 */

/*!
  @const kSCPropNetEthernetCapabilityAV
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityAV                     API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityAV kSCPropNetEthernetCapabilityAV

/*!
  @const kSCPropNetEthernetCapabilityJUMBO_MTU
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityJUMBO_MTU              API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityJUMBO_MTU kSCPropNetEthernetCapabilityJUMBO_MTU

/*!
  @const kSCPropNetEthernetCapabilityLRO
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityLRO                    API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityLRO kSCPropNetEthernetCapabilityLRO

/*!
  @const kSCPropNetEthernetCapabilityRXCSUM
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityRXCSUM                 API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityRXCSUM kSCPropNetEthernetCapabilityRXCSUM

/*!
  @const kSCPropNetEthernetCapabilityTSO
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityTSO                    API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityTSO kSCPropNetEthernetCapabilityTSO

/*!
  @const kSCPropNetEthernetCapabilityTSO4
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityTSO4                   API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityTSO4 kSCPropNetEthernetCapabilityTSO4

/*!
  @const kSCPropNetEthernetCapabilityTSO6
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityTSO6                   API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityTSO6 kSCPropNetEthernetCapabilityTSO6

/*!
  @const kSCPropNetEthernetCapabilityTXCSUM
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityTXCSUM                 API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityTXCSUM kSCPropNetEthernetCapabilityTXCSUM

/*!
  @const kSCPropNetEthernetCapabilityVLAN_HWTAGGING
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityVLAN_HWTAGGING         API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityVLAN_HWTAGGING kSCPropNetEthernetCapabilityVLAN_HWTAGGING

/*!
  @const kSCPropNetEthernetCapabilityVLAN_MTU
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetEthernetCapabilityVLAN_MTU               API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetEthernetCapabilityVLAN_MTU kSCPropNetEthernetCapabilityVLAN_MTU

/*!
  @group kSCEntNetInterface Entity Keys
 */

/*!
  @const kSCValNetInterfaceTypeCellular
 */
extern const CFStringRef kSCValNetInterfaceTypeCellular                     SPI_AVAILABLE(macos(10.0), ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetInterfaceTypeCellular kSCValNetInterfaceTypeCellular

/*!
  @const kSCValNetInterfaceTypeLoopback
 */
extern const CFStringRef kSCValNetInterfaceTypeLoopback                     API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetInterfaceTypeLoopback kSCValNetInterfaceTypeLoopback

/*!
  @const kSCValNetInterfaceTypeVPN
 */
extern const CFStringRef kSCValNetInterfaceTypeVPN                          API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetInterfaceTypeVPN kSCValNetInterfaceTypeVPN

/*!
  @const kSCPropNetIPSecDisconnectOnWake
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetIPSecDisconnectOnWake                    API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecDisconnectOnWake kSCPropNetIPSecDisconnectOnWake

/*!
  @const kSCPropNetIPSecDisconnectOnWakeTimer
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetIPSecDisconnectOnWakeTimer               API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecDisconnectOnWakeTimer kSCPropNetIPSecDisconnectOnWakeTimer

/*!
  @group kSCEntNetIPSec Entity Keys
 */

/*!
  @const kSCPropNetIPSecLastCause
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetIPSecLastCause                           API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecLastCause kSCPropNetIPSecLastCause

/*!
  @const kSCPropNetIPSecOnDemandEnabled
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetIPSecOnDemandEnabled                     API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecOnDemandEnabled kSCPropNetIPSecOnDemandEnabled

/*!
  @const kSCPropNetIPSecOnDemandMatchDomainsAlways
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetIPSecOnDemandMatchDomainsAlways          API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecOnDemandMatchDomainsAlways kSCPropNetIPSecOnDemandMatchDomainsAlways

/*!
  @const kSCPropNetIPSecOnDemandMatchDomainsOnRetry
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetIPSecOnDemandMatchDomainsOnRetry         API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecOnDemandMatchDomainsOnRetry kSCPropNetIPSecOnDemandMatchDomainsOnRetry

/*!
  @const kSCPropNetIPSecOnDemandMatchDomainsNever
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetIPSecOnDemandMatchDomainsNever           API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(3.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPSecOnDemandMatchDomainsNever kSCPropNetIPSecOnDemandMatchDomainsNever

/*!
  @group kSCEntNetIPv4 Entity Keys
 */

/*!
  @const kSCPropNetIPv4AdditionalRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv4AdditionalRoutes                     API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4AdditionalRoutes kSCPropNetIPv4AdditionalRoutes

/*!
  @const kSCPropNetIPv4ARPResolvedHardwareAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4ARPResolvedHardwareAddress           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4ARPResolvedHardwareAddress kSCPropNetIPv4ARPResolvedHardwareAddress

/*!
  @const kSCPropNetIPv4ARPResolvedIPAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4ARPResolvedIPAddress                 API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4ARPResolvedIPAddress kSCPropNetIPv4ARPResolvedIPAddress

/*!
  @const kSCPropNetIPv4CLAT46
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetIPv4CLAT46                               API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCPropNetIPv4CLAT46 kSCPropNetIPv4CLAT46

/*!
  @const kSCPropNetIPv4ExcludedRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv4ExcludedRoutes                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4ExcludedRoutes kSCPropNetIPv4ExcludedRoutes

/*!
  @const kSCPropNetIPv4IncludedRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv4IncludedRoutes                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4IncludedRoutes kSCPropNetIPv4IncludedRoutes

/*!
  @const kSCValNetIPv4ConfigMethodFailover
 */
extern const CFStringRef kSCValNetIPv4ConfigMethodFailover                  API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetIPv4ConfigMethodFailover kSCValNetIPv4ConfigMethodFailover

/*!
  @const kSCPropNetIPv4RouteDestinationAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4RouteDestinationAddress              API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4RouteDestinationAddress kSCPropNetIPv4RouteDestinationAddress

/*!
  @const kSCPropNetIPv4RouteSubnetMask
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4RouteSubnetMask                      API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4RouteSubnetMask kSCPropNetIPv4RouteSubnetMask

/*!
  @const kSCPropNetIPv4RouteGatewayAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4RouteGatewayAddress                  API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4RouteGatewayAddress kSCPropNetIPv4RouteGatewayAddress

/*!
  @const kSCPropNetIPv4RouteInterfaceName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv4RouteInterfaceName                   API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv4RouteInterfaceName kSCPropNetIPv4RouteInterfaceName

/*!
  @group kSCEntNetIPv6 Entity Keys
 */

/*!
  @const kSCPropNetIPv6AdditionalRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv6AdditionalRoutes                     API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6AdditionalRoutes kSCPropNetIPv6AdditionalRoutes

/*!
  @const kSCPropNetIPv6EnableCGA
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetIPv6EnableCGA                            API_AVAILABLE(macos(10.12)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetIPv6EnableCGA kSCPropNetIPv6EnableCGA

/*!
  @const kSCPropNetIPv6ExcludedRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv6ExcludedRoutes                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6ExcludedRoutes kSCPropNetIPv6ExcludedRoutes

/*!
  @const kSCPropNetIPv6IncludedRoutes
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetIPv6IncludedRoutes                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6IncludedRoutes kSCPropNetIPv6IncludedRoutes

/*!
  @const kSCPropNetIPv6LinkLocalAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv6LinkLocalAddress                     API_AVAILABLE(macos(10.12)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetIPv6LinkLocalAddress kSCPropNetIPv6LinkLocalAddress

/*!
  @const kSCPropNetIPv6PerformPLATDiscovery
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetIPv6PerformPLATDiscovery                 API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCPropNetIPv6PerformPLATDiscovery kSCPropNetIPv6PerformPLATDiscovery

/*!
  @const kSCPropNetIPv6RouteDestinationAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv6RouteDestinationAddress              API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6RouteDestinationAddress kSCPropNetIPv6RouteDestinationAddress

/*!
  @const kSCPropNetIPv6RoutePrefixLength
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetIPv6RoutePrefixLength                    API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6RoutePrefixLength kSCPropNetIPv6RoutePrefixLength

/*!
  @const kSCPropNetIPv6RouteGatewayAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv6RouteGatewayAddress                  API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6RouteGatewayAddress kSCPropNetIPv6RouteGatewayAddress

/*!
  @const kSCPropNetIPv6RouteInterfaceName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetIPv6RouteInterfaceName                   API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetIPv6RouteInterfaceName kSCPropNetIPv6RouteInterfaceName

/*!
  @group kSCEntNetLink Entity Keys
 */

/*!
  @const kSCPropNetLinkExpensive
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetLinkExpensive                            API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetLinkExpensive kSCPropNetLinkExpensive

/*!
  @group kSCEntNetLinkIssues Entity Keys
 */

/*!
  @const kSCPropNetLinkIssuesModuleID
  @discussion Value is a CFData
 */
extern const CFStringRef kSCPropNetLinkIssuesModuleID                       API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetLinkIssuesModuleID kSCPropNetLinkIssuesModuleID

/*!
  @const kSCPropNetLinkIssuesInfo
  @discussion Value is a CFData
 */
extern const CFStringRef kSCPropNetLinkIssuesInfo                           API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetLinkIssuesInfo kSCPropNetLinkIssuesInfo

/*!
  @const kSCPropNetLinkIssuesTimeStamp
  @discussion Value is a CFDate
 */
extern const CFStringRef kSCPropNetLinkIssuesTimeStamp                      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetLinkIssuesTimeStamp kSCPropNetLinkIssuesTimeStamp

/*!
  @group kSCEntNetLinkQuality Entity Keys
 */

/*!
  @const kSCPropNetLinkQuality
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetLinkQuality                              API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetLinkQuality kSCPropNetLinkQuality

/*!
  @const kSCPropNetPPPDisconnectOnWake
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetPPPDisconnectOnWake                      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPDisconnectOnWake kSCPropNetPPPDisconnectOnWake

/*!
  @const kSCPropNetPPPDisconnectOnWakeTimer
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetPPPDisconnectOnWakeTimer                 API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPDisconnectOnWakeTimer kSCPropNetPPPDisconnectOnWakeTimer

/*!
  @group kSCEntNetPPP Entity Keys
 */

/*!
  @const kSCPropNetPPPOnDemandDomains
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetPPPOnDemandDomains                       API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandDomains kSCPropNetPPPOnDemandDomains

/*!
  @const kSCPropNetPPPOnDemandEnabled
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetPPPOnDemandEnabled                       API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandEnabled kSCPropNetPPPOnDemandEnabled

/*!
  @const kSCPropNetPPPOnDemandHostName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetPPPOnDemandHostName                      API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandHostName kSCPropNetPPPOnDemandHostName

/*!
  @const kSCPropNetPPPOnDemandMatchDomainsAlways
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetPPPOnDemandMatchDomainsAlways            API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandMatchDomainsAlways kSCPropNetPPPOnDemandMatchDomainsAlways

/*!
  @const kSCPropNetPPPOnDemandMatchDomainsOnRetry
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetPPPOnDemandMatchDomainsOnRetry           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandMatchDomainsOnRetry kSCPropNetPPPOnDemandMatchDomainsOnRetry

/*!
  @const kSCPropNetPPPOnDemandMatchDomainsNever
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetPPPOnDemandMatchDomainsNever             API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandMatchDomainsNever kSCPropNetPPPOnDemandMatchDomainsNever

/*!
  @const kSCPropNetPPPOnDemandMode
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetPPPOnDemandMode                          API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandMode kSCPropNetPPPOnDemandMode

/*!
  @const kSCPropNetPPPOnDemandPriority
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetPPPOnDemandPriority                      API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetPPPOnDemandPriority kSCPropNetPPPOnDemandPriority

/*!
  @const kSCValNetPPPOnDemandModeAggressive
 */
extern const CFStringRef kSCValNetPPPOnDemandModeAggressive                 API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandModeAggressive kSCValNetPPPOnDemandModeAggressive

/*!
  @const kSCValNetPPPOnDemandModeConservative
 */
extern const CFStringRef kSCValNetPPPOnDemandModeConservative               API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandModeConservative kSCValNetPPPOnDemandModeConservative

/*!
  @const kSCValNetPPPOnDemandModeCompatible
 */
extern const CFStringRef kSCValNetPPPOnDemandModeCompatible                 API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandModeCompatible kSCValNetPPPOnDemandModeCompatible

/*!
  @const kSCValNetPPPOnDemandPriorityDefault
 */
extern const CFStringRef kSCValNetPPPOnDemandPriorityDefault                API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandPriorityDefault kSCValNetPPPOnDemandPriorityDefault

/*!
  @const kSCValNetPPPOnDemandPriorityHigh
 */
extern const CFStringRef kSCValNetPPPOnDemandPriorityHigh                   API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandPriorityHigh kSCValNetPPPOnDemandPriorityHigh

/*!
  @const kSCValNetPPPOnDemandPriorityLow
 */
extern const CFStringRef kSCValNetPPPOnDemandPriorityLow                    API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetPPPOnDemandPriorityLow kSCValNetPPPOnDemandPriorityLow

/*!
  @group kSCEntNetNAT64 Entity Keys
 */

/*!
  @const kSCPropNetNAT64PrefixList
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetNAT64PrefixList                          API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCPropNetNAT64PrefixList kSCPropNetNAT64PrefixList

/*!
  @const kSCPropNetNAT64PLATDiscoveryStartTime
  @discussion Value is a CFDate
 */
extern const CFStringRef kSCPropNetNAT64PLATDiscoveryStartTime              API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCPropNetNAT64PLATDiscoveryStartTime kSCPropNetNAT64PLATDiscoveryStartTime

/*!
  @const kSCPropNetNAT64PLATDiscoveryCompletionTime
  @discussion Value is a CFDate
 */
extern const CFStringRef kSCPropNetNAT64PLATDiscoveryCompletionTime         API_AVAILABLE(macos(10.14)) SPI_AVAILABLE(ios(12.0), tvos(12.0), watchos(5.0), bridgeos(3.0));
#define kSCPropNetNAT64PLATDiscoveryCompletionTime kSCPropNetNAT64PLATDiscoveryCompletionTime

/*!
  @group kSCEntNetProxies Entity Keys
 */

/*!
  @const kSCPropNetProxiesTransportConverterEnable
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterEnable          API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterEnable kSCPropNetProxiesTransportConverterEnable

/*!
  @const kSCPropNetProxiesTransportConverterPort
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterPort            API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterPort kSCPropNetProxiesTransportConverterPort

/*!
  @const kSCPropNetProxiesTransportConverterProxy
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterProxy           API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterProxy kSCPropNetProxiesTransportConverterProxy

/*!
  @const kSCPropNetProxiesTransportConverterFallBackAllowed
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterFallBackAllowed  API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterFallBackAllowed kSCPropNetProxiesTransportConverterFallBackAllowed

/*!
  @const kSCPropNetProxiesTransportConverterMultipathServiceType
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterMultipathServiceType  API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterMultipathServiceType kSCPropNetProxiesTransportConverterMultipathServiceType

/*!
  @const kSCPropNetProxiesTransportConverterTFOMode
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetProxiesTransportConverterTFOMode         API_AVAILABLE(macos(11.0)) SPI_AVAILABLE(ios(14.0), tvos(14.0), watchos(7.0), bridgeos(5.0));
#define kSCPropNetProxiesTransportConverterTFOMode kSCPropNetProxiesTransportConverterTFOMode

/*!
  @const kSCPropNetProxiesBypassAllowed
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetProxiesBypassAllowed                     API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesBypassAllowed kSCPropNetProxiesBypassAllowed

/*!
  @const kSCPropNetProxiesFallBackAllowed
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetProxiesFallBackAllowed                   API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesFallBackAllowed kSCPropNetProxiesFallBackAllowed

/*!
  @const kSCPropNetProxiesSupplementalMatchDomains
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetProxiesSupplementalMatchDomains          API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesSupplementalMatchDomains kSCPropNetProxiesSupplementalMatchDomains

/*!
  @const kSCPropNetProxiesSupplementalMatchOrders
  @discussion Value is a CFArray[CFNumber]
 */
extern const CFStringRef kSCPropNetProxiesSupplementalMatchOrders           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesSupplementalMatchOrders kSCPropNetProxiesSupplementalMatchOrders

/*!
  @const kSCPropNetProxiesServiceSpecific
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetProxiesServiceSpecific                   API_AVAILABLE(macos(10.11)) SPI_AVAILABLE(ios(9.0), tvos(9.0), watchos(2.0), bridgeos(2.0));
#define kSCPropNetProxiesServiceSpecific kSCPropNetProxiesServiceSpecific

/*!
  @const kSCPropNetProxiesScoped
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPropNetProxiesScoped                            API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesScoped kSCPropNetProxiesScoped

/*!
  @const kSCPropNetProxiesServices
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPropNetProxiesServices                          API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesServices kSCPropNetProxiesServices

/*!
  @const kSCPropNetProxiesSupplemental
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetProxiesSupplemental                      API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesSupplemental kSCPropNetProxiesSupplemental

/*!
  @const kSCPropNetProxiesSupplementalMatchDomain
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetProxiesSupplementalMatchDomain           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(5.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetProxiesSupplementalMatchDomain kSCPropNetProxiesSupplementalMatchDomain

/*!
  @group kSCEntNetQoSMarkingPolicy Entity Keys
 */

/*!
  @const kSCPropNetQoSMarkingAppleAudioVideoCalls
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetQoSMarkingAppleAudioVideoCalls           API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetQoSMarkingAppleAudioVideoCalls kSCPropNetQoSMarkingAppleAudioVideoCalls

/*!
  @const kSCPropNetQoSMarkingEnabled
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetQoSMarkingEnabled                        API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetQoSMarkingEnabled kSCPropNetQoSMarkingEnabled

/*!
  @const kSCPropNetQoSMarkingWhitelistedAppIdentifiers
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetQoSMarkingWhitelistedAppIdentifiers      API_AVAILABLE(macos(10.13)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetQoSMarkingWhitelistedAppIdentifiers kSCPropNetQoSMarkingWhitelistedAppIdentifiers

/*!
  @group kSCEntNetService Entity Keys
 */

/*!
  @const kSCPropNetServicePrimaryRank
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetServicePrimaryRank                       API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetServicePrimaryRank kSCPropNetServicePrimaryRank

/*!
  @const kSCPropNetServiceServiceIndex
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetServiceServiceIndex                      API_AVAILABLE(macos(10.12)) SPI_AVAILABLE(ios(10.0), tvos(10.0), watchos(3.0), bridgeos(2.0));
#define kSCPropNetServiceServiceIndex kSCPropNetServiceServiceIndex

/*!
  @const kSCPropNetServiceUserDefinedName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetServiceUserDefinedName                   API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetServiceUserDefinedName kSCPropNetServiceUserDefinedName

/*!
  @const kSCValNetServicePrimaryRankFirst
 */
extern const CFStringRef kSCValNetServicePrimaryRankFirst                   API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetServicePrimaryRankFirst kSCValNetServicePrimaryRankFirst

/*!
  @const kSCValNetServicePrimaryRankLast
 */
extern const CFStringRef kSCValNetServicePrimaryRankLast                    API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetServicePrimaryRankLast kSCValNetServicePrimaryRankLast

/*!
  @const kSCValNetServicePrimaryRankNever
 */
extern const CFStringRef kSCValNetServicePrimaryRankNever                   API_AVAILABLE(macos(10.6)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetServicePrimaryRankNever kSCValNetServicePrimaryRankNever

/*!
  @const kSCValNetServicePrimaryRankScoped
 */
extern const CFStringRef kSCValNetServicePrimaryRankScoped                  API_AVAILABLE(macos(10.10)) SPI_AVAILABLE(ios(8.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetServicePrimaryRankScoped kSCValNetServicePrimaryRankScoped

/*!
  @group kSCEntNetVPN Entity Keys
 */

/*!
  @const kSCPropNetVPNAppRules
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetVPNAppRules                              API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAppRules kSCPropNetVPNAppRules

/*!
  @const kSCPropNetVPNAuthCredentialPassword
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthCredentialPassword                API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthCredentialPassword kSCPropNetVPNAuthCredentialPassword

/*!
  @const kSCPropNetVPNAuthName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthName                              API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthName kSCPropNetVPNAuthName

/*!
  @const kSCPropNetVPNAuthPassword
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthPassword                          API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthPassword kSCPropNetVPNAuthPassword

/*!
  @const kSCPropNetVPNAuthPasswordEncryption
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthPasswordEncryption                API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthPasswordEncryption kSCPropNetVPNAuthPasswordEncryption

/*!
  @const kSCPropNetVPNAuthPasswordPluginType
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthPasswordPluginType                API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthPasswordPluginType kSCPropNetVPNAuthPasswordPluginType

/*!
  @const kSCPropNetVPNAuthenticationMethod
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNAuthenticationMethod                  API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNAuthenticationMethod kSCPropNetVPNAuthenticationMethod

/*!
  @const kSCPropNetVPNConnectTime
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNConnectTime                           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNConnectTime kSCPropNetVPNConnectTime

/*!
  @const kSCPropNetVPNDisconnectOnFastUserSwitch
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnFastUserSwitch            API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnFastUserSwitch kSCPropNetVPNDisconnectOnFastUserSwitch

/*!
  @const kSCPropNetVPNDisconnectOnIdle
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnIdle                      API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnIdle kSCPropNetVPNDisconnectOnIdle

/*!
  @const kSCPropNetVPNDisconnectOnIdleTimer
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnIdleTimer                 API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnIdleTimer kSCPropNetVPNDisconnectOnIdleTimer

/*!
  @const kSCPropNetVPNDisconnectOnLogout
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnLogout                    API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnLogout kSCPropNetVPNDisconnectOnLogout

/*!
  @const kSCPropNetVPNDisconnectOnSleep
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnSleep                     API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnSleep kSCPropNetVPNDisconnectOnSleep

/*!
  @const kSCPropNetVPNDisconnectOnWake
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnWake                      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnWake kSCPropNetVPNDisconnectOnWake

/*!
  @const kSCPropNetVPNDisconnectOnWakeTimer
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetVPNDisconnectOnWakeTimer                 API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNDisconnectOnWakeTimer kSCPropNetVPNDisconnectOnWakeTimer

/*!
  @const kSCPropNetVPNLocalCertificate
  @discussion Value is a CFData
 */
extern const CFStringRef kSCPropNetVPNLocalCertificate                      API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNLocalCertificate kSCPropNetVPNLocalCertificate

/*!
  @const kSCPropNetVPNLogfile
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNLogfile                               API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNLogfile kSCPropNetVPNLogfile

/*!
  @const kSCPropNetVPNMTU
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetVPNMTU                                   API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNMTU kSCPropNetVPNMTU

/*!
  @const kSCPropNetVPNOnDemandEnabled
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNOnDemandEnabled                       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandEnabled kSCPropNetVPNOnDemandEnabled

/*!
  @const kSCPropNetVPNOnDemandMatchAppEnabled
  @discussion Value is a CFBoolean
 */
extern const CFStringRef kSCPropNetVPNOnDemandMatchAppEnabled               API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandMatchAppEnabled kSCPropNetVPNOnDemandMatchAppEnabled

/*!
  @const kSCPropNetVPNOnDemandMatchDomainsAlways
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandMatchDomainsAlways            API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandMatchDomainsAlways kSCPropNetVPNOnDemandMatchDomainsAlways

/*!
  @const kSCPropNetVPNOnDemandMatchDomainsOnRetry
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandMatchDomainsOnRetry           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandMatchDomainsOnRetry kSCPropNetVPNOnDemandMatchDomainsOnRetry

/*!
  @const kSCPropNetVPNOnDemandMatchDomainsNever
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandMatchDomainsNever             API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandMatchDomainsNever kSCPropNetVPNOnDemandMatchDomainsNever

/*!
  @const kSCPropNetVPNOnDemandRules
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRules                         API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRules kSCPropNetVPNOnDemandRules

/*!
  @const kSCPropNetVPNOnDemandSuspended
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetVPNOnDemandSuspended                     API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandSuspended kSCPropNetVPNOnDemandSuspended

/*!
  @const kSCPropNetVPNPluginCapability
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNPluginCapability                      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNPluginCapability kSCPropNetVPNPluginCapability

/*!
  @const kSCPropNetVPNRemoteAddress
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNRemoteAddress                         API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNRemoteAddress kSCPropNetVPNRemoteAddress

/*!
  @const kSCPropNetVPNStatus
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropNetVPNStatus                                API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNStatus kSCPropNetVPNStatus

/*!
  @const kSCPropNetVPNVerboseLogging
  @discussion Value is a CFNumber (0 or 1)
 */
extern const CFStringRef kSCPropNetVPNVerboseLogging                        API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNVerboseLogging kSCPropNetVPNVerboseLogging

/*!
  @const kSCValNetVPNAppRuleAccountIdentifierMatch
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCValNetVPNAppRuleAccountIdentifierMatch          API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleAccountIdentifierMatch kSCValNetVPNAppRuleAccountIdentifierMatch

/*!
  @const kSCValNetVPNAppRuleDNSDomainMatch
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCValNetVPNAppRuleDNSDomainMatch                  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleDNSDomainMatch kSCValNetVPNAppRuleDNSDomainMatch

/*!
  @const kSCValNetVPNAppRuleExecutableMatch
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCValNetVPNAppRuleExecutableMatch                 API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleExecutableMatch kSCValNetVPNAppRuleExecutableMatch

/*!
  @const kSCValNetVPNAppRuleIdentifier
  @discussion Value is a CFString
 */
extern const CFStringRef kSCValNetVPNAppRuleIdentifier                      API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleIdentifier kSCValNetVPNAppRuleIdentifier

/*!
  @const kSCValNetVPNAppRuleExecutableDesignatedRequirement
  @discussion Value is a CFString
 */
extern const CFStringRef kSCValNetVPNAppRuleExecutableDesignatedRequirement  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleExecutableDesignatedRequirement kSCValNetVPNAppRuleExecutableDesignatedRequirement

/*!
  @const kSCValNetVPNAppRuleExecutableSigningIdentifier
  @discussion Value is a CFString
 */
extern const CFStringRef kSCValNetVPNAppRuleExecutableSigningIdentifier     API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleExecutableSigningIdentifier kSCValNetVPNAppRuleExecutableSigningIdentifier

/*!
  @const kSCValNetVPNAppRuleExecutableUUID
  @discussion Value is a CFString
 */
extern const CFStringRef kSCValNetVPNAppRuleExecutableUUID                  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAppRuleExecutableUUID kSCValNetVPNAppRuleExecutableUUID

/*!
  @const kSCValNetVPNAuthenticationMethodPassword
 */
extern const CFStringRef kSCValNetVPNAuthenticationMethodPassword           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAuthenticationMethodPassword kSCValNetVPNAuthenticationMethodPassword

/*!
  @const kSCValNetVPNAuthenticationMethodCertificate
 */
extern const CFStringRef kSCValNetVPNAuthenticationMethodCertificate        API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAuthenticationMethodCertificate kSCValNetVPNAuthenticationMethodCertificate

/*!
  @const kSCValNetVPNAuthPasswordEncryptionExternal
 */
extern const CFStringRef kSCValNetVPNAuthPasswordEncryptionExternal         API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAuthPasswordEncryptionExternal kSCValNetVPNAuthPasswordEncryptionExternal

/*!
  @const kSCValNetVPNAuthPasswordEncryptionKeychain
 */
extern const CFStringRef kSCValNetVPNAuthPasswordEncryptionKeychain         API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAuthPasswordEncryptionKeychain kSCValNetVPNAuthPasswordEncryptionKeychain

/*!
  @const kSCValNetVPNAuthPasswordEncryptionPrompt
 */
extern const CFStringRef kSCValNetVPNAuthPasswordEncryptionPrompt           API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNAuthPasswordEncryptionPrompt kSCValNetVPNAuthPasswordEncryptionPrompt

/*!
  @const kSCPropNetVPNOnDemandRuleAction
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleAction                    API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleAction kSCPropNetVPNOnDemandRuleAction

/*!
  @const kSCPropNetVPNOnDemandRuleActionParameters
  @discussion Value is a CFArray[CFDictionary]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleActionParameters          API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleActionParameters kSCPropNetVPNOnDemandRuleActionParameters

/*!
  @const kSCPropNetVPNOnDemandRuleDNSDomainMatch
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleDNSDomainMatch            API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleDNSDomainMatch kSCPropNetVPNOnDemandRuleDNSDomainMatch

/*!
  @const kSCPropNetVPNOnDemandRuleDNSServerAddressMatch
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleDNSServerAddressMatch     API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleDNSServerAddressMatch kSCPropNetVPNOnDemandRuleDNSServerAddressMatch

/*!
  @const kSCPropNetVPNOnDemandRuleSSIDMatch
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleSSIDMatch                 API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleSSIDMatch kSCPropNetVPNOnDemandRuleSSIDMatch

/*!
  @const kSCPropNetVPNOnDemandRuleInterfaceTypeMatch
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleInterfaceTypeMatch        API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleInterfaceTypeMatch kSCPropNetVPNOnDemandRuleInterfaceTypeMatch

/*!
  @const kSCPropNetVPNOnDemandRuleURLStringProbe
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleURLStringProbe            API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleURLStringProbe kSCPropNetVPNOnDemandRuleURLStringProbe

/*!
  @const kSCValNetVPNOnDemandRuleActionAllow
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionAllow                API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionAllow kSCValNetVPNOnDemandRuleActionAllow

/*!
  @const kSCValNetVPNOnDemandRuleActionIgnore
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionIgnore               API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionIgnore kSCValNetVPNOnDemandRuleActionIgnore

/*!
  @const kSCValNetVPNOnDemandRuleActionConnect
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionConnect              API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionConnect kSCValNetVPNOnDemandRuleActionConnect

/*!
  @const kSCValNetVPNOnDemandRuleActionDisconnect
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionDisconnect           API_AVAILABLE(macos(10.8)) SPI_AVAILABLE(ios(6.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionDisconnect kSCValNetVPNOnDemandRuleActionDisconnect

/*!
  @const kSCValNetVPNOnDemandRuleActionEvaluateConnection
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionEvaluateConnection   API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionEvaluateConnection kSCValNetVPNOnDemandRuleActionEvaluateConnection

/*!
  @const kSCPropNetVPNOnDemandRuleActionParametersDomainAction
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleActionParametersDomainAction  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleActionParametersDomainAction kSCPropNetVPNOnDemandRuleActionParametersDomainAction

/*!
  @const kSCPropNetVPNOnDemandRuleActionParametersDomains
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleActionParametersDomains   API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleActionParametersDomains kSCPropNetVPNOnDemandRuleActionParametersDomains

/*!
  @const kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers

/*!
  @const kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe

/*!
  @const kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded

/*!
  @const kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect

/*!
  @const kSCValNetVPNOnDemandRuleInterfaceTypeMatchCellular
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleInterfaceTypeMatchCellular  SPI_AVAILABLE(macos(9.0), ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleInterfaceTypeMatchCellular kSCValNetVPNOnDemandRuleInterfaceTypeMatchCellular

/*!
  @const kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet  API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet

/*!
  @const kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi
 */
extern const CFStringRef kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi     API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi

/*!
  @const kSCValNetVPNPluginCapabilityAuth
 */
extern const CFStringRef kSCValNetVPNPluginCapabilityAuth                   API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNPluginCapabilityAuth kSCValNetVPNPluginCapabilityAuth

/*!
  @const kSCValNetVPNPluginCapabilityConnect
 */
extern const CFStringRef kSCValNetVPNPluginCapabilityConnect                API_AVAILABLE(macos(10.9)) SPI_AVAILABLE(ios(7.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCValNetVPNPluginCapabilityConnect kSCValNetVPNPluginCapabilityConnect

/*!
  @group kSCCompSystem Properties
 */

/*!
  @const kSCPropSystemComputerNameRegion
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropSystemComputerNameRegion                    API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropSystemComputerNameRegion kSCPropSystemComputerNameRegion

/*!
  @const kSCPropSystemHostName
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropSystemHostName                              API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropSystemHostName kSCPropSystemHostName

/*!
  @group Virtual Network Interface Keys
 */

/*!
  @const kSCPropVirtualNetworkInterfacesBondInterfaces
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesBondInterfaces      API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesBondInterfaces kSCPropVirtualNetworkInterfacesBondInterfaces

/*!
  @const kSCPropVirtualNetworkInterfacesBondMode
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesBondMode            API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesBondMode kSCPropVirtualNetworkInterfacesBondMode

/*!
  @const kSCPropVirtualNetworkInterfacesBondOptions
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesBondOptions         API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesBondOptions kSCPropVirtualNetworkInterfacesBondOptions

/*!
  @const kSCPropVirtualNetworkInterfacesBridgeInterfaces
  @discussion Value is a CFArray[CFString]
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesBridgeInterfaces    API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesBridgeInterfaces kSCPropVirtualNetworkInterfacesBridgeInterfaces

/*!
  @const kSCPropVirtualNetworkInterfacesBridgeOptions
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesBridgeOptions       API_AVAILABLE(macos(10.7)) SPI_AVAILABLE(ios(4.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesBridgeOptions kSCPropVirtualNetworkInterfacesBridgeOptions

/*!
  @const kSCPropVirtualNetworkInterfacesVLANInterface
  @discussion Value is a CFString
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesVLANInterface       API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesVLANInterface kSCPropVirtualNetworkInterfacesVLANInterface

/*!
  @const kSCPropVirtualNetworkInterfacesVLANTag
  @discussion Value is a CFNumber
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesVLANTag             API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesVLANTag kSCPropVirtualNetworkInterfacesVLANTag

/*!
  @const kSCPropVirtualNetworkInterfacesVLANOptions
  @discussion Value is a CFDictionary
 */
extern const CFStringRef kSCPropVirtualNetworkInterfacesVLANOptions         API_AVAILABLE(macos(10.5)) SPI_AVAILABLE(ios(2.0), tvos(9.0), watchos(1.0), bridgeos(1.0));
#define kSCPropVirtualNetworkInterfacesVLANOptions kSCPropVirtualNetworkInterfacesVLANOptions


#endif	/* _SCSCHEMADEFINITIONSPRIVATE_H */
